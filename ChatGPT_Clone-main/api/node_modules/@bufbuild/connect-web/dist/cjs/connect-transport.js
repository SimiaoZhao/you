"use strict";
// Copyright 2021-2022 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.createConnectTransport = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
const connect_error_js_1 = require("./connect-error.js");
const code_js_1 = require("./code.js");
const interceptor_js_1 = require("./interceptor.js");
const envelope_js_1 = require("./envelope.js");
const http_headers_js_1 = require("./http-headers.js");
const assert_fetch_api_js_1 = require("./assert-fetch-api.js");
/**
 * Create a Transport for the Connect protocol, which makes unary and
 * server-streaming methods available to web browsers. It uses the fetch
 * API to make HTTP requests.
 */
function createConnectTransport(options) {
    var _a;
    (0, assert_fetch_api_js_1.assertFetchApi)();
    const useBinaryFormat = (_a = options.useBinaryFormat) !== null && _a !== void 0 ? _a : false;
    return {
        async unary(service, method, signal, timeoutMs, header, message) {
            var _a;
            try {
                return await (0, interceptor_js_1.runUnary)({
                    stream: false,
                    service,
                    method,
                    url: `${options.baseUrl.replace(/\/$/, "")}/${service.typeName}/${method.name}`,
                    init: {
                        method: "POST",
                        credentials: (_a = options.credentials) !== null && _a !== void 0 ? _a : "same-origin",
                        redirect: "error",
                        mode: "cors",
                    },
                    header: createConnectRequestHeaders(header, timeoutMs, method.kind, useBinaryFormat),
                    message: message instanceof method.I ? message : new method.I(message),
                    signal: signal !== null && signal !== void 0 ? signal : new AbortController().signal,
                }, async (unaryRequest) => {
                    var _a;
                    const response = await fetch(unaryRequest.url, Object.assign(Object.assign({}, unaryRequest.init), { headers: unaryRequest.header, signal: unaryRequest.signal, body: createConnectRequestBody(unaryRequest.message, method.kind, useBinaryFormat, options.jsonOptions) }));
                    const responseType = (_a = response.headers.get("Content-Type")) !== null && _a !== void 0 ? _a : "";
                    if (response.status != 200) {
                        if (responseType == "application/json") {
                            throw (0, connect_error_js_1.connectErrorFromJson)((await response.json()), (0, http_headers_js_1.mergeHeaders)(...demuxHeaderTrailers(response.headers)));
                        }
                        throw new connect_error_js_1.ConnectError(`HTTP ${response.status} ${response.statusText}`, (0, code_js_1.codeFromConnectHttpStatus)(response.status));
                    }
                    expectContentType(responseType, false, useBinaryFormat);
                    const [demuxedHeader, demuxedTrailer] = demuxHeaderTrailers(response.headers);
                    return {
                        stream: false,
                        service,
                        method,
                        header: demuxedHeader,
                        message: useBinaryFormat
                            ? method.O.fromBinary(new Uint8Array(await response.arrayBuffer()), options.binaryOptions)
                            : method.O.fromJson((await response.json()), options.jsonOptions),
                        trailer: demuxedTrailer,
                    };
                }, options.interceptors);
            }
            catch (e) {
                throw (0, connect_error_js_1.connectErrorFromReason)(e, code_js_1.Code.Internal);
            }
        },
        async serverStream(service, method, signal, timeoutMs, header, message) {
            var _a;
            try {
                return await (0, interceptor_js_1.runServerStream)({
                    stream: false,
                    service,
                    method,
                    url: `${options.baseUrl.replace(/\/$/, "")}/${service.typeName}/${method.name}`,
                    init: {
                        method: "POST",
                        credentials: (_a = options.credentials) !== null && _a !== void 0 ? _a : "same-origin",
                        redirect: "error",
                        mode: "cors",
                    },
                    header: createConnectRequestHeaders(header, timeoutMs, method.kind, useBinaryFormat),
                    message: message instanceof method.I ? message : new method.I(message),
                    signal: signal !== null && signal !== void 0 ? signal : new AbortController().signal,
                }, async (unaryRequest) => {
                    var _a;
                    const response = await fetch(unaryRequest.url, Object.assign(Object.assign({}, unaryRequest.init), { headers: unaryRequest.header, signal: unaryRequest.signal, body: createConnectRequestBody(unaryRequest.message, method.kind, useBinaryFormat, options.jsonOptions) }));
                    const responseType = (_a = response.headers.get("Content-Type")) !== null && _a !== void 0 ? _a : "";
                    if (response.status != 200) {
                        if (responseType == "application/json") {
                            throw (0, connect_error_js_1.connectErrorFromJson)((await response.json()), (0, http_headers_js_1.mergeHeaders)(...demuxHeaderTrailers(response.headers)));
                        }
                        throw new connect_error_js_1.ConnectError(`HTTP ${response.status} ${response.statusText}`, (0, code_js_1.codeFromConnectHttpStatus)(response.status));
                    }
                    expectContentType(responseType, true, useBinaryFormat);
                    if (response.body === null) {
                        throw "missing response body";
                    }
                    const reader = (0, envelope_js_1.createEnvelopeReadableStream)(response.body).getReader();
                    let endStreamReceived = false;
                    return {
                        stream: true,
                        service,
                        method,
                        header: response.headers,
                        trailer: new Headers(),
                        async read() {
                            const result = await reader.read();
                            if (result.done) {
                                if (!endStreamReceived) {
                                    throw new connect_error_js_1.ConnectError("missing EndStreamResponse");
                                }
                                return {
                                    done: true,
                                    value: undefined,
                                };
                            }
                            if ((result.value.flags & endStreamResponseFlag) ===
                                endStreamResponseFlag) {
                                endStreamReceived = true;
                                const endStream = endStreamFromJson(result.value.data);
                                endStream.metadata.forEach((value, key) => this.trailer.append(key, value));
                                if (endStream.error) {
                                    throw endStream.error;
                                }
                                return {
                                    done: true,
                                    value: undefined,
                                };
                            }
                            return {
                                done: false,
                                value: useBinaryFormat
                                    ? method.O.fromBinary(result.value.data, options.binaryOptions)
                                    : method.O.fromJsonString(new TextDecoder().decode(result.value.data), options.jsonOptions),
                            };
                        },
                    };
                }, options.interceptors);
            }
            catch (e) {
                throw (0, connect_error_js_1.connectErrorFromReason)(e, code_js_1.Code.Internal);
            }
        },
    };
}
exports.createConnectTransport = createConnectTransport;
/**
 * Creates a body for a Connect request. Supports only requests with a single
 * message because of browser API limitations, but applies the enveloping
 * required for server-streaming requests.
 */
function createConnectRequestBody(message, methodKind, useBinaryFormat, jsonOptions) {
    const encoded = useBinaryFormat
        ? message.toBinary()
        : message.toJsonString(jsonOptions);
    if (methodKind == protobuf_1.MethodKind.Unary) {
        return encoded;
    }
    const data = typeof encoded == "string" ? new TextEncoder().encode(encoded) : encoded;
    return (0, envelope_js_1.encodeEnvelopes)({
        data,
        flags: 0b00000000,
    }, {
        data: new Uint8Array(0),
        flags: endStreamResponseFlag,
    });
}
/**
 * Creates headers for a Connect request.
 */
function createConnectRequestHeaders(headers, timeoutMs, methodKind, useBinaryFormat) {
    const result = new Headers(headers !== null && headers !== void 0 ? headers : {});
    let type = "application/";
    if (methodKind != protobuf_1.MethodKind.Unary) {
        type += "connect+";
    }
    type += useBinaryFormat ? "proto" : "json";
    result.set("Content-Type", type);
    if (timeoutMs !== undefined) {
        result.set("Connect-Timeout-Ms", `${timeoutMs}`);
    }
    return result;
}
/**
 * Asserts a valid Connect Content-Type response header. Raises a ConnectError
 * otherwise.
 */
function expectContentType(contentType, stream, binaryFormat) {
    const match = contentType === null || contentType === void 0 ? void 0 : contentType.match(/^application\/(connect\+)?(json|proto)$/);
    const gotBinaryFormat = match && match[2] == "proto";
    if (!match || stream !== !!match[1] || binaryFormat !== gotBinaryFormat) {
        throw new connect_error_js_1.ConnectError(`unexpected response content type ${String(contentType)}`, code_js_1.Code.Internal);
    }
}
/**
 * In unary RPCs, Connect transports trailing metadata as response header
 * fields, prefixed with "trailer-".
 *
 * This function demuxes headers and trailers into two separate Headers
 * objects.
 */
function demuxHeaderTrailers(header) {
    const h = new Headers(), t = new Headers();
    header.forEach((value, key) => {
        if (key.toLowerCase().startsWith("trailer-")) {
            t.set(key.substring(8), value);
        }
        else {
            h.set(key, value);
        }
    });
    return [h, t];
}
const endStreamResponseFlag = 0b00000010;
/**
 * Parse an EndStreamResponse of the Connect protocol.
 */
function endStreamFromJson(data) {
    let jsonValue;
    try {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        jsonValue = JSON.parse(new TextDecoder().decode(data));
    }
    catch (e) {
        throw (0, connect_error_js_1.newParseError)(e, "", false);
    }
    if (typeof jsonValue != "object" ||
        jsonValue == null ||
        Array.isArray(jsonValue)) {
        throw (0, connect_error_js_1.newParseError)(jsonValue);
    }
    const metadata = new Headers();
    if ("metadata" in jsonValue) {
        if (typeof jsonValue.metadata != "object" ||
            jsonValue.metadata == null ||
            Array.isArray(jsonValue.metadata)) {
            throw (0, connect_error_js_1.newParseError)(jsonValue, ".metadata");
        }
        for (const [key, values] of Object.entries(jsonValue.metadata)) {
            if (!Array.isArray(values) ||
                values.some((value) => typeof value != "string")) {
                throw (0, connect_error_js_1.newParseError)(values, `.metadata["${key}"]`);
            }
            for (const value of values) {
                metadata.append(key, value);
            }
        }
    }
    const error = "error" in jsonValue
        ? (0, connect_error_js_1.connectErrorFromJson)(jsonValue.error, metadata)
        : undefined;
    return { metadata, error };
}
