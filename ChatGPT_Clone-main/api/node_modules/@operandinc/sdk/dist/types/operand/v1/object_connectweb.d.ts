import { AnswerRequest, AnswerResponse, CountRequest, CountResponse, DeleteRequest, DeleteResponse, GetRequest, GetResponse, ListRequest, ListResponse, SearchWithinRequest, SearchWithinResponse, SuggestionsRequest, SuggestionsResponse, UpsertRequest, UpsertResponse } from "./object_pb.js";
import { MethodKind } from "@bufbuild/protobuf";
/**
 * ObjectService is the user-facing API for doing operations on objects themselves, within an index.
 * To use this service, must pass `Operand-Index-ID` as a header, which specifies the index to use.
 * The API key, passed by the `Authorization`, must have appropriate permissions to access the index.
 *
 * @generated from service operand.v1.ObjectService
 */
export declare const ObjectService: {
    readonly typeName: "operand.v1.ObjectService";
    readonly methods: {
        /**
         * Upsert inserts or updates an object within the index.
         *
         * @generated from rpc operand.v1.ObjectService.Upsert
         */
        readonly upsert: {
            readonly name: "Upsert";
            readonly I: typeof UpsertRequest;
            readonly O: typeof UpsertResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         * Suggestions returns a list of suggested objects that the user may choose to index
         * based on the given query. For example, if the user is trying to index a podcast,
         * and they pass in the name, we return a list of podcasts that we could index for them
         * based on the name. This typically searches external resources, i.e. APIs.
         *
         * @generated from rpc operand.v1.ObjectService.Suggestions
         */
        readonly suggestions: {
            readonly name: "Suggestions";
            readonly I: typeof SuggestionsRequest;
            readonly O: typeof SuggestionsResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         * List lists objects within the index.
         *
         * @generated from rpc operand.v1.ObjectService.List
         */
        readonly list: {
            readonly name: "List";
            readonly I: typeof ListRequest;
            readonly O: typeof ListResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         * Get gets one or more objects from the index by their ID.
         *
         * @generated from rpc operand.v1.ObjectService.Get
         */
        readonly get: {
            readonly name: "Get";
            readonly I: typeof GetRequest;
            readonly O: typeof GetResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         * Delete deletes one or more objects from the index by their ID.
         *
         * @generated from rpc operand.v1.ObjectService.Delete
         */
        readonly delete: {
            readonly name: "Delete";
            readonly I: typeof DeleteRequest;
            readonly O: typeof DeleteResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         * Count counts the objects in the index.
         *
         * @generated from rpc operand.v1.ObjectService.Count
         */
        readonly count: {
            readonly name: "Count";
            readonly I: typeof CountRequest;
            readonly O: typeof CountResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         * SearchWithin searches for content within objects themselves, returning small snippets of
         * relevant content to the search query, along with the relevant objects themselves.
         *
         * @generated from rpc operand.v1.ObjectService.SearchWithin
         */
        readonly searchWithin: {
            readonly name: "SearchWithin";
            readonly I: typeof SearchWithinRequest;
            readonly O: typeof SearchWithinResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         * Answer generates a natural language to a question, using the content of the index as the
         * ground truth. If we don't have a good answer, we don't answer.
         *
         * @generated from rpc operand.v1.ObjectService.Answer
         */
        readonly answer: {
            readonly name: "Answer";
            readonly I: typeof AnswerRequest;
            readonly O: typeof AnswerResponse;
            readonly kind: MethodKind.Unary;
        };
    };
};
