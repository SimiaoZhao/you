"use strict";
// @generated by protoc-gen-es v0.1.1 with parameter "target=ts+js"
// @generated from file operand/v1/operand.proto (package operand.v1, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PublicIndexesResponse = exports.PublicIndexesRequest = exports.SearchResponse = exports.ContentSnippet = exports.SearchRequest = exports.FeedResponse_FeedObject = exports.FeedResponse = exports.FeedRequest = exports.PaginationParams = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
const object_pb_js_1 = require("./object_pb.js");
const index_pb_js_1 = require("./index_pb.js");
/**
 * PaginationParams are the parameters used to paginate a feed.
 *
 * @generated from message operand.v1.PaginationParams
 */
class PaginationParams extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: int32 limit = 1;
         */
        this.limit = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PaginationParams().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PaginationParams().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PaginationParams().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(PaginationParams, a, b);
    }
}
exports.PaginationParams = PaginationParams;
PaginationParams.runtime = protobuf_1.proto3;
PaginationParams.typeName = "operand.v1.PaginationParams";
PaginationParams.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "offset", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 3, name: "latest_time", kind: "message", T: protobuf_1.Timestamp, opt: true },
]);
/**
 * FeedRequest is the request object for the Feed RPC.
 *
 * @generated from message operand.v1.FeedRequest
 */
class FeedRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FeedRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FeedRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FeedRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(FeedRequest, a, b);
    }
}
exports.FeedRequest = FeedRequest;
FeedRequest.runtime = protobuf_1.proto3;
FeedRequest.typeName = "operand.v1.FeedRequest";
FeedRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "specific_index_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "pagination_params", kind: "message", T: PaginationParams, opt: true },
    { no: 3, name: "object_options", kind: "message", T: object_pb_js_1.ObjectOptions, opt: true },
    { no: 4, name: "index_options", kind: "message", T: index_pb_js_1.IndexOptions, opt: true },
]);
/**
 * FeedResponse is the response object for the Feed RPC.
 *
 * @generated from message operand.v1.FeedResponse
 */
class FeedResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated operand.v1.FeedResponse.FeedObject feed_objects = 1;
         */
        this.feedObjects = [];
        /**
         * @generated from field: map<string, operand.v1.Index> indexes = 2;
         */
        this.indexes = {};
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FeedResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FeedResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FeedResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(FeedResponse, a, b);
    }
}
exports.FeedResponse = FeedResponse;
FeedResponse.runtime = protobuf_1.proto3;
FeedResponse.typeName = "operand.v1.FeedResponse";
FeedResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "feed_objects", kind: "message", T: FeedResponse_FeedObject, repeated: true },
    { no: 2, name: "indexes", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: index_pb_js_1.Index } },
]);
/**
 * @generated from message operand.v1.FeedResponse.FeedObject
 */
class FeedResponse_FeedObject extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string index_id = 1;
         */
        this.indexId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FeedResponse_FeedObject().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FeedResponse_FeedObject().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FeedResponse_FeedObject().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(FeedResponse_FeedObject, a, b);
    }
}
exports.FeedResponse_FeedObject = FeedResponse_FeedObject;
FeedResponse_FeedObject.runtime = protobuf_1.proto3;
FeedResponse_FeedObject.typeName = "operand.v1.FeedResponse.FeedObject";
FeedResponse_FeedObject.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "index_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "object", kind: "message", T: object_pb_js_1.Object$ },
]);
/**
 * SearchRequest is the request object for the Search RPC.
 *
 * @generated from message operand.v1.SearchRequest
 */
class SearchRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated string index_ids = 1;
         */
        this.indexIds = [];
        /**
         * @generated from field: string query = 2;
         */
        this.query = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SearchRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SearchRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SearchRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SearchRequest, a, b);
    }
}
exports.SearchRequest = SearchRequest;
SearchRequest.runtime = protobuf_1.proto3;
SearchRequest.typeName = "operand.v1.SearchRequest";
SearchRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "index_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 4, name: "attempt_answer", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 5, name: "object_options", kind: "message", T: object_pb_js_1.ObjectOptions, opt: true },
    { no: 6, name: "index_options", kind: "message", T: index_pb_js_1.IndexOptions, opt: true },
]);
/**
 * ContentSnippet is a snippet of content taken directly from the content of an object. This is used
 * within search results, as well as to show context for the result of a given operation.
 *
 * @generated from message operand.v1.ContentSnippet
 */
class ContentSnippet extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string content = 1;
         */
        this.content = "";
        /**
         * @generated from field: string object_id = 2;
         */
        this.objectId = "";
        /**
         * @generated from field: string index_id = 3;
         */
        this.indexId = "";
        /**
         * @generated from field: float score = 5;
         */
        this.score = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ContentSnippet().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ContentSnippet().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ContentSnippet().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ContentSnippet, a, b);
    }
}
exports.ContentSnippet = ContentSnippet;
ContentSnippet.runtime = protobuf_1.proto3;
ContentSnippet.typeName = "operand.v1.ContentSnippet";
ContentSnippet.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "object_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "index_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "extra", kind: "message", T: object_pb_js_1.Properties, opt: true },
    { no: 5, name: "score", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
]);
/**
 * SearchResponse is the response object for the Search RPC.
 *
 * @generated from message operand.v1.SearchResponse
 */
class SearchResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated operand.v1.ContentSnippet results = 1;
         */
        this.results = [];
        /**
         * @generated from field: map<string, operand.v1.Object> objects = 2;
         */
        this.objects = {};
        /**
         * @generated from field: map<string, operand.v1.Index> indexes = 3;
         */
        this.indexes = {};
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SearchResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SearchResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SearchResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SearchResponse, a, b);
    }
}
exports.SearchResponse = SearchResponse;
SearchResponse.runtime = protobuf_1.proto3;
SearchResponse.typeName = "operand.v1.SearchResponse";
SearchResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "results", kind: "message", T: ContentSnippet, repeated: true },
    { no: 2, name: "objects", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: object_pb_js_1.Object$ } },
    { no: 3, name: "indexes", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: index_pb_js_1.Index } },
    { no: 4, name: "answer", kind: "message", T: object_pb_js_1.Answer, opt: true },
]);
/**
 * PublicIndexesRequest is the request object for the PublicIndexes RPC.
 *
 * @generated from message operand.v1.PublicIndexesRequest
 */
class PublicIndexesRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PublicIndexesRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PublicIndexesRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PublicIndexesRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(PublicIndexesRequest, a, b);
    }
}
exports.PublicIndexesRequest = PublicIndexesRequest;
PublicIndexesRequest.runtime = protobuf_1.proto3;
PublicIndexesRequest.typeName = "operand.v1.PublicIndexesRequest";
PublicIndexesRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 3, name: "index_options", kind: "message", T: index_pb_js_1.IndexOptions, opt: true },
]);
/**
 * PublicIndexesResponse is the response object for the PublicIndexes RPC.
 *
 * @generated from message operand.v1.PublicIndexesResponse
 */
class PublicIndexesResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated operand.v1.Index indexes = 1;
         */
        this.indexes = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PublicIndexesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PublicIndexesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PublicIndexesResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(PublicIndexesResponse, a, b);
    }
}
exports.PublicIndexesResponse = PublicIndexesResponse;
PublicIndexesResponse.runtime = protobuf_1.proto3;
PublicIndexesResponse.typeName = "operand.v1.PublicIndexesResponse";
PublicIndexesResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "indexes", kind: "message", T: index_pb_js_1.Index, repeated: true },
]);
