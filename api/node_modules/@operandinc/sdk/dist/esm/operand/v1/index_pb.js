// @generated by protoc-gen-es v0.1.1 with parameter "target=ts+js"
// @generated from file operand/v1/index.proto (package operand.v1, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { Filter, Object$, UserProfile } from "./object_pb.js";
/**
 * @generated from enum operand.v1.ExplorationKind
 */
export var ExplorationKind;
(function (ExplorationKind) {
    /**
     * @generated from enum value: EXPLORATION_KIND_UNSPECIFIED = 0;
     */
    ExplorationKind[ExplorationKind["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from enum value: EXPLORATION_KIND_CONCEPTS = 1;
     */
    ExplorationKind[ExplorationKind["CONCEPTS"] = 1] = "CONCEPTS";
})(ExplorationKind || (ExplorationKind = {}));
// Retrieve enum metadata with: proto3.getEnumType(ExplorationKind)
proto3.util.setEnumType(ExplorationKind, "operand.v1.ExplorationKind", [
    { no: 0, name: "EXPLORATION_KIND_UNSPECIFIED" },
    { no: 1, name: "EXPLORATION_KIND_CONCEPTS" },
]);
/**
 * @generated from enum operand.v1.ExplorationStatus
 */
export var ExplorationStatus;
(function (ExplorationStatus) {
    /**
     * @generated from enum value: EXPLORATION_STATUS_UNSPECIFIED = 0;
     */
    ExplorationStatus[ExplorationStatus["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from enum value: EXPLORATION_STATUS_PENDING = 1;
     */
    ExplorationStatus[ExplorationStatus["PENDING"] = 1] = "PENDING";
    /**
     * @generated from enum value: EXPLORATION_STATUS_RUNNING = 2;
     */
    ExplorationStatus[ExplorationStatus["RUNNING"] = 2] = "RUNNING";
    /**
     * @generated from enum value: EXPLORATION_STATUS_COMPLETED = 3;
     */
    ExplorationStatus[ExplorationStatus["COMPLETED"] = 3] = "COMPLETED";
    /**
     * @generated from enum value: EXPLORATION_STATUS_FAILED = 4;
     */
    ExplorationStatus[ExplorationStatus["FAILED"] = 4] = "FAILED";
})(ExplorationStatus || (ExplorationStatus = {}));
// Retrieve enum metadata with: proto3.getEnumType(ExplorationStatus)
proto3.util.setEnumType(ExplorationStatus, "operand.v1.ExplorationStatus", [
    { no: 0, name: "EXPLORATION_STATUS_UNSPECIFIED" },
    { no: 1, name: "EXPLORATION_STATUS_PENDING" },
    { no: 2, name: "EXPLORATION_STATUS_RUNNING" },
    { no: 3, name: "EXPLORATION_STATUS_COMPLETED" },
    { no: 4, name: "EXPLORATION_STATUS_FAILED" },
]);
/**
 * @generated from message operand.v1.IndexOptions
 */
export class IndexOptions extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new IndexOptions().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new IndexOptions().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new IndexOptions().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(IndexOptions, a, b);
    }
}
IndexOptions.runtime = proto3;
IndexOptions.typeName = "operand.v1.IndexOptions";
IndexOptions.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "include_owner", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 2, name: "include_subscription", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 3, name: "include_stats", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
]);
/**
 * @generated from message operand.v1.CreateIndexRequest
 */
export class CreateIndexRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string name = 1;
         */
        this.name = "";
        /**
         * @generated from field: string description = 2;
         */
        this.description = "";
        /**
         * @generated from field: bool public = 3;
         */
        this.public = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CreateIndexRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CreateIndexRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CreateIndexRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(CreateIndexRequest, a, b);
    }
}
CreateIndexRequest.runtime = proto3;
CreateIndexRequest.typeName = "operand.v1.CreateIndexRequest";
CreateIndexRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "public", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "options", kind: "message", T: IndexOptions, opt: true },
    { no: 5, name: "image_url", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
]);
/**
 * @generated from message operand.v1.Subscription
 */
export class Subscription extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bool notifications = 2;
         */
        this.notifications = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Subscription().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Subscription().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Subscription().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Subscription, a, b);
    }
}
Subscription.runtime = proto3;
Subscription.typeName = "operand.v1.Subscription";
Subscription.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "created_at", kind: "message", T: Timestamp },
    { no: 2, name: "notifications", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * @generated from message operand.v1.IndexStats
 */
export class IndexStats extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: int32 subscribers = 1;
         */
        this.subscribers = 0;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new IndexStats().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new IndexStats().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new IndexStats().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(IndexStats, a, b);
    }
}
IndexStats.runtime = proto3;
IndexStats.typeName = "operand.v1.IndexStats";
IndexStats.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "subscribers", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
]);
/**
 * @generated from message operand.v1.Index
 */
export class Index extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string public_id = 1;
         */
        this.publicId = "";
        /**
         * @generated from field: bool public = 4;
         */
        this.public = false;
        /**
         * @generated from field: string name = 5;
         */
        this.name = "";
        /**
         * @generated from field: string description = 6;
         */
        this.description = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Index().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Index().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Index().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Index, a, b);
    }
}
Index.runtime = proto3;
Index.typeName = "operand.v1.Index";
Index.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "public_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "owner", kind: "message", T: UserProfile, opt: true },
    { no: 3, name: "created_at", kind: "message", T: Timestamp },
    { no: 4, name: "public", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "subscription", kind: "message", T: Subscription, opt: true },
    { no: 8, name: "stats", kind: "message", T: IndexStats, opt: true },
    { no: 9, name: "image_url", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
]);
/**
 * @generated from message operand.v1.CreateIndexResponse
 */
export class CreateIndexResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CreateIndexResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CreateIndexResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CreateIndexResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(CreateIndexResponse, a, b);
    }
}
CreateIndexResponse.runtime = proto3;
CreateIndexResponse.typeName = "operand.v1.CreateIndexResponse";
CreateIndexResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "index", kind: "message", T: Index },
]);
/**
 * @generated from message operand.v1.ListIndexesRequest
 */
export class ListIndexesRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListIndexesRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListIndexesRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListIndexesRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ListIndexesRequest, a, b);
    }
}
ListIndexesRequest.runtime = proto3;
ListIndexesRequest.typeName = "operand.v1.ListIndexesRequest";
ListIndexesRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "owned_by_user", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "options", kind: "message", T: IndexOptions, opt: true },
]);
/**
 * @generated from message operand.v1.ListIndexesResponse
 */
export class ListIndexesResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated operand.v1.Index indexes = 1;
         */
        this.indexes = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListIndexesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListIndexesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListIndexesResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ListIndexesResponse, a, b);
    }
}
ListIndexesResponse.runtime = proto3;
ListIndexesResponse.typeName = "operand.v1.ListIndexesResponse";
ListIndexesResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "indexes", kind: "message", T: Index, repeated: true },
]);
/**
 * @generated from message operand.v1.GetIndexRequest
 */
export class GetIndexRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetIndexRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetIndexRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetIndexRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GetIndexRequest, a, b);
    }
}
GetIndexRequest.runtime = proto3;
GetIndexRequest.typeName = "operand.v1.GetIndexRequest";
GetIndexRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "public_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "options", kind: "message", T: IndexOptions, opt: true },
    { no: 3, name: "invite_code", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
]);
/**
 * @generated from message operand.v1.GetIndexResponse
 */
export class GetIndexResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetIndexResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetIndexResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetIndexResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GetIndexResponse, a, b);
    }
}
GetIndexResponse.runtime = proto3;
GetIndexResponse.typeName = "operand.v1.GetIndexResponse";
GetIndexResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "index", kind: "message", T: Index },
]);
/**
 * @generated from message operand.v1.UpdateIndexRequest
 */
export class UpdateIndexRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string public_id = 1;
         */
        this.publicId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpdateIndexRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpdateIndexRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpdateIndexRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(UpdateIndexRequest, a, b);
    }
}
UpdateIndexRequest.runtime = proto3;
UpdateIndexRequest.typeName = "operand.v1.UpdateIndexRequest";
UpdateIndexRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "public_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "public", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 5, name: "options", kind: "message", T: IndexOptions, opt: true },
    { no: 6, name: "image_url", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
]);
/**
 * @generated from message operand.v1.UpdateIndexResponse
 */
export class UpdateIndexResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpdateIndexResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpdateIndexResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpdateIndexResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(UpdateIndexResponse, a, b);
    }
}
UpdateIndexResponse.runtime = proto3;
UpdateIndexResponse.typeName = "operand.v1.UpdateIndexResponse";
UpdateIndexResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "index", kind: "message", T: Index },
]);
/**
 * @generated from message operand.v1.DeleteIndexRequest
 */
export class DeleteIndexRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string public_id = 1;
         */
        this.publicId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteIndexRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteIndexRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteIndexRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(DeleteIndexRequest, a, b);
    }
}
DeleteIndexRequest.runtime = proto3;
DeleteIndexRequest.typeName = "operand.v1.DeleteIndexRequest";
DeleteIndexRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "public_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message operand.v1.DeleteIndexResponse
 */
export class DeleteIndexResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteIndexResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteIndexResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteIndexResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(DeleteIndexResponse, a, b);
    }
}
DeleteIndexResponse.runtime = proto3;
DeleteIndexResponse.typeName = "operand.v1.DeleteIndexResponse";
DeleteIndexResponse.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message operand.v1.SubscriptionsRequest
 */
export class SubscriptionsRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SubscriptionsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SubscriptionsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SubscriptionsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SubscriptionsRequest, a, b);
    }
}
SubscriptionsRequest.runtime = proto3;
SubscriptionsRequest.typeName = "operand.v1.SubscriptionsRequest";
SubscriptionsRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "options", kind: "message", T: IndexOptions, opt: true },
]);
/**
 * @generated from message operand.v1.SubscriptionsResponse
 */
export class SubscriptionsResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated operand.v1.Index indexes = 1;
         */
        this.indexes = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SubscriptionsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SubscriptionsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SubscriptionsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SubscriptionsResponse, a, b);
    }
}
SubscriptionsResponse.runtime = proto3;
SubscriptionsResponse.typeName = "operand.v1.SubscriptionsResponse";
SubscriptionsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "indexes", kind: "message", T: Index, repeated: true },
]);
/**
 * @generated from message operand.v1.SubscribeRequest
 */
export class SubscribeRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SubscribeRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SubscribeRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SubscribeRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SubscribeRequest, a, b);
    }
}
SubscribeRequest.runtime = proto3;
SubscribeRequest.typeName = "operand.v1.SubscribeRequest";
SubscribeRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "public_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "notifications", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 3, name: "invite_token", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
]);
/**
 * @generated from message operand.v1.SubscribeResponse
 */
export class SubscribeResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SubscribeResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SubscribeResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SubscribeResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SubscribeResponse, a, b);
    }
}
SubscribeResponse.runtime = proto3;
SubscribeResponse.typeName = "operand.v1.SubscribeResponse";
SubscribeResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "subscription", kind: "message", T: Subscription },
]);
/**
 * @generated from message operand.v1.UnsubscribeRequest
 */
export class UnsubscribeRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string public_id = 1;
         */
        this.publicId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UnsubscribeRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UnsubscribeRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UnsubscribeRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(UnsubscribeRequest, a, b);
    }
}
UnsubscribeRequest.runtime = proto3;
UnsubscribeRequest.typeName = "operand.v1.UnsubscribeRequest";
UnsubscribeRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "public_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "target_user_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
]);
/**
 * @generated from message operand.v1.UnsubscribeResponse
 */
export class UnsubscribeResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UnsubscribeResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UnsubscribeResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UnsubscribeResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(UnsubscribeResponse, a, b);
    }
}
UnsubscribeResponse.runtime = proto3;
UnsubscribeResponse.typeName = "operand.v1.UnsubscribeResponse";
UnsubscribeResponse.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message operand.v1.InviteRequest
 */
export class InviteRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string public_id = 1;
         */
        this.publicId = "";
        /**
         * @generated from oneof operand.v1.InviteRequest.target
         */
        this.target = { case: undefined };
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new InviteRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new InviteRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new InviteRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(InviteRequest, a, b);
    }
}
InviteRequest.runtime = proto3;
InviteRequest.typeName = "operand.v1.InviteRequest";
InviteRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "public_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_public_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "target" },
    { no: 3, name: "email_address", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "target" },
]);
/**
 * @generated from message operand.v1.InviteResponse
 */
export class InviteResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new InviteResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new InviteResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new InviteResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(InviteResponse, a, b);
    }
}
InviteResponse.runtime = proto3;
InviteResponse.typeName = "operand.v1.InviteResponse";
InviteResponse.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message operand.v1.SubscribersOfRequest
 */
export class SubscribersOfRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string public_id = 1;
         */
        this.publicId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SubscribersOfRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SubscribersOfRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SubscribersOfRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SubscribersOfRequest, a, b);
    }
}
SubscribersOfRequest.runtime = proto3;
SubscribersOfRequest.typeName = "operand.v1.SubscribersOfRequest";
SubscribersOfRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "public_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message operand.v1.SubscribersOfResponse
 */
export class SubscribersOfResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated operand.v1.UserProfile subscribers = 1;
         */
        this.subscribers = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SubscribersOfResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SubscribersOfResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SubscribersOfResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SubscribersOfResponse, a, b);
    }
}
SubscribersOfResponse.runtime = proto3;
SubscribersOfResponse.typeName = "operand.v1.SubscribersOfResponse";
SubscribersOfResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "subscribers", kind: "message", T: UserProfile, repeated: true },
]);
/**
 * @generated from message operand.v1.AvailableExplorationsRequest
 */
export class AvailableExplorationsRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string index_id = 1;
         */
        this.indexId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AvailableExplorationsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AvailableExplorationsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AvailableExplorationsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(AvailableExplorationsRequest, a, b);
    }
}
AvailableExplorationsRequest.runtime = proto3;
AvailableExplorationsRequest.typeName = "operand.v1.AvailableExplorationsRequest";
AvailableExplorationsRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "index_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message operand.v1.AvailableExplorationsResponse
 */
export class AvailableExplorationsResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated operand.v1.ExplorationKind kinds = 1;
         */
        this.kinds = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AvailableExplorationsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AvailableExplorationsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AvailableExplorationsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(AvailableExplorationsResponse, a, b);
    }
}
AvailableExplorationsResponse.runtime = proto3;
AvailableExplorationsResponse.typeName = "operand.v1.AvailableExplorationsResponse";
AvailableExplorationsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "kinds", kind: "enum", T: proto3.getEnumType(ExplorationKind), repeated: true },
]);
/**
 * @generated from message operand.v1.ExplorationParameters
 */
export class ExplorationParameters extends Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof operand.v1.ExplorationParameters.kind
         */
        this.kind = { case: undefined };
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ExplorationParameters().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ExplorationParameters().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ExplorationParameters().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ExplorationParameters, a, b);
    }
}
ExplorationParameters.runtime = proto3;
ExplorationParameters.typeName = "operand.v1.ExplorationParameters";
ExplorationParameters.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "concepts", kind: "message", T: ConceptsExplorationParameters, oneof: "kind" },
]);
/**
 * @generated from message operand.v1.ConceptsExplorationParameters
 */
export class ConceptsExplorationParameters extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: int32 target_size = 1;
         */
        this.targetSize = 0;
        /**
         * @generated from field: repeated operand.v1.ConceptsExplorationParameters.SummaryKind summary_kinds = 2;
         */
        this.summaryKinds = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ConceptsExplorationParameters().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ConceptsExplorationParameters().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ConceptsExplorationParameters().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ConceptsExplorationParameters, a, b);
    }
}
ConceptsExplorationParameters.runtime = proto3;
ConceptsExplorationParameters.typeName = "operand.v1.ConceptsExplorationParameters";
ConceptsExplorationParameters.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "target_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "summary_kinds", kind: "enum", T: proto3.getEnumType(ConceptsExplorationParameters_SummaryKind), repeated: true },
    { no: 3, name: "filter", kind: "message", T: Filter, opt: true },
]);
/**
 * @generated from enum operand.v1.ConceptsExplorationParameters.SummaryKind
 */
export var ConceptsExplorationParameters_SummaryKind;
(function (ConceptsExplorationParameters_SummaryKind) {
    /**
     * @generated from enum value: SUMMARY_KIND_UNSPECIFIED = 0;
     */
    ConceptsExplorationParameters_SummaryKind[ConceptsExplorationParameters_SummaryKind["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from enum value: SUMMARY_KIND_TOPIC_STRING = 1;
     */
    ConceptsExplorationParameters_SummaryKind[ConceptsExplorationParameters_SummaryKind["TOPIC_STRING"] = 1] = "TOPIC_STRING";
    /**
     * @generated from enum value: SUMMARY_KIND_MARKDOWN = 2;
     */
    ConceptsExplorationParameters_SummaryKind[ConceptsExplorationParameters_SummaryKind["MARKDOWN"] = 2] = "MARKDOWN";
})(ConceptsExplorationParameters_SummaryKind || (ConceptsExplorationParameters_SummaryKind = {}));
// Retrieve enum metadata with: proto3.getEnumType(ConceptsExplorationParameters_SummaryKind)
proto3.util.setEnumType(ConceptsExplorationParameters_SummaryKind, "operand.v1.ConceptsExplorationParameters.SummaryKind", [
    { no: 0, name: "SUMMARY_KIND_UNSPECIFIED" },
    { no: 1, name: "SUMMARY_KIND_TOPIC_STRING" },
    { no: 2, name: "SUMMARY_KIND_MARKDOWN" },
]);
/**
 * @generated from message operand.v1.ExplorationData
 */
export class ExplorationData extends Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof operand.v1.ExplorationData.kind
         */
        this.kind = { case: undefined };
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ExplorationData().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ExplorationData().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ExplorationData().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ExplorationData, a, b);
    }
}
ExplorationData.runtime = proto3;
ExplorationData.typeName = "operand.v1.ExplorationData";
ExplorationData.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "concepts", kind: "message", T: ConceptsExplorationData, oneof: "kind" },
]);
/**
 * @generated from message operand.v1.ConceptsExplorationData
 */
export class ConceptsExplorationData extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated operand.v1.ConceptsExplorationData.Concept concepts = 1;
         */
        this.concepts = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ConceptsExplorationData().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ConceptsExplorationData().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ConceptsExplorationData().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ConceptsExplorationData, a, b);
    }
}
ConceptsExplorationData.runtime = proto3;
ConceptsExplorationData.typeName = "operand.v1.ConceptsExplorationData";
ConceptsExplorationData.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "concepts", kind: "message", T: ConceptsExplorationData_Concept, repeated: true },
]);
/**
 * @generated from message operand.v1.ConceptsExplorationData.Snippet
 */
export class ConceptsExplorationData_Snippet extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string text = 1;
         */
        this.text = "";
        /**
         * @generated from field: string object_id = 2;
         */
        this.objectId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ConceptsExplorationData_Snippet().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ConceptsExplorationData_Snippet().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ConceptsExplorationData_Snippet().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ConceptsExplorationData_Snippet, a, b);
    }
}
ConceptsExplorationData_Snippet.runtime = proto3;
ConceptsExplorationData_Snippet.typeName = "operand.v1.ConceptsExplorationData.Snippet";
ConceptsExplorationData_Snippet.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "object_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message operand.v1.ConceptsExplorationData.Summary
 */
export class ConceptsExplorationData_Summary extends Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof operand.v1.ConceptsExplorationData.Summary.kind
         */
        this.kind = { case: undefined };
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ConceptsExplorationData_Summary().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ConceptsExplorationData_Summary().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ConceptsExplorationData_Summary().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ConceptsExplorationData_Summary, a, b);
    }
}
ConceptsExplorationData_Summary.runtime = proto3;
ConceptsExplorationData_Summary.typeName = "operand.v1.ConceptsExplorationData.Summary";
ConceptsExplorationData_Summary.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "topic_string", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "kind" },
    { no: 2, name: "markdown", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "kind" },
]);
/**
 * @generated from message operand.v1.ConceptsExplorationData.Concept
 */
export class ConceptsExplorationData_Concept extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated operand.v1.ConceptsExplorationData.Snippet snippets = 1;
         */
        this.snippets = [];
        /**
         * @generated from field: map<string, operand.v1.Object> objects = 2;
         */
        this.objects = {};
        /**
         * @generated from field: repeated operand.v1.ConceptsExplorationData.Summary summaries = 3;
         */
        this.summaries = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ConceptsExplorationData_Concept().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ConceptsExplorationData_Concept().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ConceptsExplorationData_Concept().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ConceptsExplorationData_Concept, a, b);
    }
}
ConceptsExplorationData_Concept.runtime = proto3;
ConceptsExplorationData_Concept.typeName = "operand.v1.ConceptsExplorationData.Concept";
ConceptsExplorationData_Concept.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "snippets", kind: "message", T: ConceptsExplorationData_Snippet, repeated: true },
    { no: 2, name: "objects", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: Object$ } },
    { no: 3, name: "summaries", kind: "message", T: ConceptsExplorationData_Summary, repeated: true },
]);
/**
 * @generated from message operand.v1.Exploration
 */
export class Exploration extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string public_id = 1;
         */
        this.publicId = "";
        /**
         * @generated from field: operand.v1.ExplorationKind kind = 4;
         */
        this.kind = ExplorationKind.UNSPECIFIED;
        /**
         * @generated from field: operand.v1.ExplorationStatus status = 6;
         */
        this.status = ExplorationStatus.UNSPECIFIED;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Exploration().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Exploration().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Exploration().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Exploration, a, b);
    }
}
Exploration.runtime = proto3;
Exploration.typeName = "operand.v1.Exploration";
Exploration.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "public_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "created_at", kind: "message", T: Timestamp },
    { no: 3, name: "updated_at", kind: "message", T: Timestamp, opt: true },
    { no: 4, name: "kind", kind: "enum", T: proto3.getEnumType(ExplorationKind) },
    { no: 5, name: "parameters", kind: "message", T: ExplorationParameters },
    { no: 6, name: "status", kind: "enum", T: proto3.getEnumType(ExplorationStatus) },
    { no: 7, name: "data", kind: "message", T: ExplorationData, opt: true },
    { no: 8, name: "error_message", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
]);
/**
 * @generated from message operand.v1.ExplorationOptions
 */
export class ExplorationOptions extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ExplorationOptions().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ExplorationOptions().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ExplorationOptions().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ExplorationOptions, a, b);
    }
}
ExplorationOptions.runtime = proto3;
ExplorationOptions.typeName = "operand.v1.ExplorationOptions";
ExplorationOptions.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "include_data", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
]);
/**
 * @generated from message operand.v1.CreateExplorationRequest
 */
export class CreateExplorationRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string index_id = 1;
         */
        this.indexId = "";
        /**
         * @generated from field: operand.v1.ExplorationKind kind = 2;
         */
        this.kind = ExplorationKind.UNSPECIFIED;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CreateExplorationRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CreateExplorationRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CreateExplorationRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(CreateExplorationRequest, a, b);
    }
}
CreateExplorationRequest.runtime = proto3;
CreateExplorationRequest.typeName = "operand.v1.CreateExplorationRequest";
CreateExplorationRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "index_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "kind", kind: "enum", T: proto3.getEnumType(ExplorationKind) },
    { no: 3, name: "parameters", kind: "message", T: ExplorationParameters },
    { no: 4, name: "options", kind: "message", T: ExplorationOptions, opt: true },
]);
/**
 * @generated from message operand.v1.CreateExplorationResponse
 */
export class CreateExplorationResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CreateExplorationResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CreateExplorationResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CreateExplorationResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(CreateExplorationResponse, a, b);
    }
}
CreateExplorationResponse.runtime = proto3;
CreateExplorationResponse.typeName = "operand.v1.CreateExplorationResponse";
CreateExplorationResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "exploration", kind: "message", T: Exploration },
]);
/**
 * @generated from message operand.v1.DeleteExplorationRequest
 */
export class DeleteExplorationRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string public_id = 1;
         */
        this.publicId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteExplorationRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteExplorationRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteExplorationRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(DeleteExplorationRequest, a, b);
    }
}
DeleteExplorationRequest.runtime = proto3;
DeleteExplorationRequest.typeName = "operand.v1.DeleteExplorationRequest";
DeleteExplorationRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "public_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message operand.v1.DeleteExplorationResponse
 */
export class DeleteExplorationResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteExplorationResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteExplorationResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteExplorationResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(DeleteExplorationResponse, a, b);
    }
}
DeleteExplorationResponse.runtime = proto3;
DeleteExplorationResponse.typeName = "operand.v1.DeleteExplorationResponse";
DeleteExplorationResponse.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message operand.v1.ListExplorationsRequest
 */
export class ListExplorationsRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string index_id = 1;
         */
        this.indexId = "";
        /**
         * @generated from field: int32 limit = 2;
         */
        this.limit = 0;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListExplorationsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListExplorationsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListExplorationsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ListExplorationsRequest, a, b);
    }
}
ListExplorationsRequest.runtime = proto3;
ListExplorationsRequest.typeName = "operand.v1.ListExplorationsRequest";
ListExplorationsRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "index_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "offset", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 4, name: "options", kind: "message", T: ExplorationOptions, opt: true },
]);
/**
 * @generated from message operand.v1.ListExplorationsResponse
 */
export class ListExplorationsResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated operand.v1.Exploration explorations = 1;
         */
        this.explorations = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListExplorationsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListExplorationsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListExplorationsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ListExplorationsResponse, a, b);
    }
}
ListExplorationsResponse.runtime = proto3;
ListExplorationsResponse.typeName = "operand.v1.ListExplorationsResponse";
ListExplorationsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "explorations", kind: "message", T: Exploration, repeated: true },
]);
/**
 * @generated from message operand.v1.GetExplorationRequest
 */
export class GetExplorationRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string public_id = 1;
         */
        this.publicId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetExplorationRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetExplorationRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetExplorationRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GetExplorationRequest, a, b);
    }
}
GetExplorationRequest.runtime = proto3;
GetExplorationRequest.typeName = "operand.v1.GetExplorationRequest";
GetExplorationRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "public_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "options", kind: "message", T: ExplorationOptions, opt: true },
]);
/**
 * @generated from message operand.v1.GetExplorationResponse
 */
export class GetExplorationResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetExplorationResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetExplorationResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetExplorationResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GetExplorationResponse, a, b);
    }
}
GetExplorationResponse.runtime = proto3;
GetExplorationResponse.typeName = "operand.v1.GetExplorationResponse";
GetExplorationResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "exploration", kind: "message", T: Exploration },
]);
