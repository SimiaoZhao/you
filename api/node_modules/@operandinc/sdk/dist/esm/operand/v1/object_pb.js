// @generated by protoc-gen-es v0.1.1 with parameter "target=ts+js"
// @generated from file operand/v1/object.proto (package operand.v1, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
/**
 * @generated from enum operand.v1.ObjectType
 */
export var ObjectType;
(function (ObjectType) {
    /**
     * @generated from enum value: OBJECT_TYPE_UNSPECIFIED = 0;
     */
    ObjectType[ObjectType["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from enum value: OBJECT_TYPE_COLLECTION = 1;
     */
    ObjectType[ObjectType["COLLECTION"] = 1] = "COLLECTION";
    /**
     * @generated from enum value: OBJECT_TYPE_TEXT = 2;
     */
    ObjectType[ObjectType["TEXT"] = 2] = "TEXT";
    /**
     * @generated from enum value: OBJECT_TYPE_HTML = 3;
     */
    ObjectType[ObjectType["HTML"] = 3] = "HTML";
    /**
     * @generated from enum value: OBJECT_TYPE_RSS = 4;
     */
    ObjectType[ObjectType["RSS"] = 4] = "RSS";
    /**
     * @generated from enum value: OBJECT_TYPE_AUDIO = 5;
     */
    ObjectType[ObjectType["AUDIO"] = 5] = "AUDIO";
    /**
     * @generated from enum value: OBJECT_TYPE_PODCAST = 6;
     */
    ObjectType[ObjectType["PODCAST"] = 6] = "PODCAST";
    /**
     * @generated from enum value: OBJECT_TYPE_SITEMAP = 7;
     */
    ObjectType[ObjectType["SITEMAP"] = 7] = "SITEMAP";
    /**
     * @generated from enum value: OBJECT_TYPE_PDF = 8;
     */
    ObjectType[ObjectType["PDF"] = 8] = "PDF";
    /**
     * @generated from enum value: OBJECT_TYPE_EPUB = 9;
     */
    ObjectType[ObjectType["EPUB"] = 9] = "EPUB";
    /**
     * @generated from enum value: OBJECT_TYPE_YOUTUBE = 10;
     */
    ObjectType[ObjectType["YOUTUBE"] = 10] = "YOUTUBE";
    /**
     * @generated from enum value: OBJECT_TYPE_MARKDOWN = 11;
     */
    ObjectType[ObjectType["MARKDOWN"] = 11] = "MARKDOWN";
    /**
     * @generated from enum value: OBJECT_TYPE_SLACK = 12;
     */
    ObjectType[ObjectType["SLACK"] = 12] = "SLACK";
    /**
     * @generated from enum value: OBJECT_TYPE_GITHUB_REPOSITORY = 13;
     */
    ObjectType[ObjectType["GITHUB_REPOSITORY"] = 13] = "GITHUB_REPOSITORY";
    /**
     * @generated from enum value: OBJECT_TYPE_SOURCE_CODE = 14;
     */
    ObjectType[ObjectType["SOURCE_CODE"] = 14] = "SOURCE_CODE";
    /**
     * @generated from enum value: OBJECT_TYPE_NOTION = 15;
     */
    ObjectType[ObjectType["NOTION"] = 15] = "NOTION";
    /**
     * @generated from enum value: OBJECT_TYPE_DISCORD = 16;
     */
    ObjectType[ObjectType["DISCORD"] = 16] = "DISCORD";
    /**
     * @generated from enum value: OBJECT_TYPE_LINEAR = 17;
     */
    ObjectType[ObjectType["LINEAR"] = 17] = "LINEAR";
    /**
     * @generated from enum value: OBJECT_TYPE_MEETING_BOT = 18;
     */
    ObjectType[ObjectType["MEETING_BOT"] = 18] = "MEETING_BOT";
})(ObjectType || (ObjectType = {}));
// Retrieve enum metadata with: proto3.getEnumType(ObjectType)
proto3.util.setEnumType(ObjectType, "operand.v1.ObjectType", [
    { no: 0, name: "OBJECT_TYPE_UNSPECIFIED" },
    { no: 1, name: "OBJECT_TYPE_COLLECTION" },
    { no: 2, name: "OBJECT_TYPE_TEXT" },
    { no: 3, name: "OBJECT_TYPE_HTML" },
    { no: 4, name: "OBJECT_TYPE_RSS" },
    { no: 5, name: "OBJECT_TYPE_AUDIO" },
    { no: 6, name: "OBJECT_TYPE_PODCAST" },
    { no: 7, name: "OBJECT_TYPE_SITEMAP" },
    { no: 8, name: "OBJECT_TYPE_PDF" },
    { no: 9, name: "OBJECT_TYPE_EPUB" },
    { no: 10, name: "OBJECT_TYPE_YOUTUBE" },
    { no: 11, name: "OBJECT_TYPE_MARKDOWN" },
    { no: 12, name: "OBJECT_TYPE_SLACK" },
    { no: 13, name: "OBJECT_TYPE_GITHUB_REPOSITORY" },
    { no: 14, name: "OBJECT_TYPE_SOURCE_CODE" },
    { no: 15, name: "OBJECT_TYPE_NOTION" },
    { no: 16, name: "OBJECT_TYPE_DISCORD" },
    { no: 17, name: "OBJECT_TYPE_LINEAR" },
    { no: 18, name: "OBJECT_TYPE_MEETING_BOT" },
]);
/**
 * @generated from enum operand.v1.AudioFileExt
 */
export var AudioFileExt;
(function (AudioFileExt) {
    /**
     * @generated from enum value: AUDIO_FILE_EXT_UNSPECIFIED = 0;
     */
    AudioFileExt[AudioFileExt["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from enum value: AUDIO_FILE_EXT_MP3 = 1;
     */
    AudioFileExt[AudioFileExt["MP3"] = 1] = "MP3";
    /**
     * @generated from enum value: AUDIO_FILE_EXT_OGG = 2;
     */
    AudioFileExt[AudioFileExt["OGG"] = 2] = "OGG";
    /**
     * @generated from enum value: AUDIO_FILE_EXT_FLAC = 3;
     */
    AudioFileExt[AudioFileExt["FLAC"] = 3] = "FLAC";
    /**
     * @generated from enum value: AUDIO_FILE_EXT_WAV = 4;
     */
    AudioFileExt[AudioFileExt["WAV"] = 4] = "WAV";
    /**
     * @generated from enum value: AUDIO_FILE_EXT_MP4 = 5;
     */
    AudioFileExt[AudioFileExt["MP4"] = 5] = "MP4";
})(AudioFileExt || (AudioFileExt = {}));
// Retrieve enum metadata with: proto3.getEnumType(AudioFileExt)
proto3.util.setEnumType(AudioFileExt, "operand.v1.AudioFileExt", [
    { no: 0, name: "AUDIO_FILE_EXT_UNSPECIFIED" },
    { no: 1, name: "AUDIO_FILE_EXT_MP3" },
    { no: 2, name: "AUDIO_FILE_EXT_OGG" },
    { no: 3, name: "AUDIO_FILE_EXT_FLAC" },
    { no: 4, name: "AUDIO_FILE_EXT_WAV" },
    { no: 5, name: "AUDIO_FILE_EXT_MP4" },
]);
/**
 * @generated from enum operand.v1.ProgrammingLanguage
 */
export var ProgrammingLanguage;
(function (ProgrammingLanguage) {
    /**
     * @generated from enum value: PROGRAMMING_LANGUAGE_UNSPECIFIED = 0;
     */
    ProgrammingLanguage[ProgrammingLanguage["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from enum value: PROGRAMMING_LANGUAGE_GO = 1;
     */
    ProgrammingLanguage[ProgrammingLanguage["GO"] = 1] = "GO";
    /**
     * @generated from enum value: PROGRAMMING_LANGUAGE_PYTHON = 2;
     */
    ProgrammingLanguage[ProgrammingLanguage["PYTHON"] = 2] = "PYTHON";
})(ProgrammingLanguage || (ProgrammingLanguage = {}));
// Retrieve enum metadata with: proto3.getEnumType(ProgrammingLanguage)
proto3.util.setEnumType(ProgrammingLanguage, "operand.v1.ProgrammingLanguage", [
    { no: 0, name: "PROGRAMMING_LANGUAGE_UNSPECIFIED" },
    { no: 1, name: "PROGRAMMING_LANGUAGE_GO" },
    { no: 2, name: "PROGRAMMING_LANGUAGE_PYTHON" },
]);
/**
 * @generated from enum operand.v1.ObjectStatus
 */
export var ObjectStatus;
(function (ObjectStatus) {
    /**
     * @generated from enum value: OBJECT_STATUS_UNSPECIFIED = 0;
     */
    ObjectStatus[ObjectStatus["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from enum value: OBJECT_STATUS_QUEUED = 1;
     */
    ObjectStatus[ObjectStatus["QUEUED"] = 1] = "QUEUED";
    /**
     * @generated from enum value: OBJECT_STATUS_INDEXING = 2;
     */
    ObjectStatus[ObjectStatus["INDEXING"] = 2] = "INDEXING";
    /**
     * @generated from enum value: OBJECT_STATUS_READY = 3;
     */
    ObjectStatus[ObjectStatus["READY"] = 3] = "READY";
    /**
     * @generated from enum value: OBJECT_STATUS_ERROR = 4;
     */
    ObjectStatus[ObjectStatus["ERROR"] = 4] = "ERROR";
})(ObjectStatus || (ObjectStatus = {}));
// Retrieve enum metadata with: proto3.getEnumType(ObjectStatus)
proto3.util.setEnumType(ObjectStatus, "operand.v1.ObjectStatus", [
    { no: 0, name: "OBJECT_STATUS_UNSPECIFIED" },
    { no: 1, name: "OBJECT_STATUS_QUEUED" },
    { no: 2, name: "OBJECT_STATUS_INDEXING" },
    { no: 3, name: "OBJECT_STATUS_READY" },
    { no: 4, name: "OBJECT_STATUS_ERROR" },
]);
/**
 * @generated from message operand.v1.ObjectMetadata
 */
export class ObjectMetadata extends Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof operand.v1.ObjectMetadata.value
         */
        this.value = { case: undefined };
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ObjectMetadata().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ObjectMetadata().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ObjectMetadata().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ObjectMetadata, a, b);
    }
}
ObjectMetadata.runtime = proto3;
ObjectMetadata.typeName = "operand.v1.ObjectMetadata";
ObjectMetadata.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "collection", kind: "message", T: CollectionMetadata, oneof: "value" },
    { no: 2, name: "text", kind: "message", T: TextMetadata, oneof: "value" },
    { no: 3, name: "html", kind: "message", T: HTMLMetadata, oneof: "value" },
    { no: 4, name: "rss", kind: "message", T: RSSMetadata, oneof: "value" },
    { no: 5, name: "audio", kind: "message", T: AudioMetadata, oneof: "value" },
    { no: 6, name: "podcast", kind: "message", T: PodcastMetadata, oneof: "value" },
    { no: 7, name: "sitemap", kind: "message", T: SitemapMetadata, oneof: "value" },
    { no: 8, name: "pdf", kind: "message", T: PDFMetadata, oneof: "value" },
    { no: 9, name: "epub", kind: "message", T: EPUBMetadata, oneof: "value" },
    { no: 10, name: "youtube", kind: "message", T: YouTubeMetadata, oneof: "value" },
    { no: 11, name: "markdown", kind: "message", T: MarkdownMetadata, oneof: "value" },
    { no: 12, name: "slack", kind: "message", T: SlackMetadata, oneof: "value" },
    { no: 13, name: "github", kind: "message", T: GithubRepositoryMetadata, oneof: "value" },
    { no: 14, name: "source_code", kind: "message", T: SourceCodeMetadata, oneof: "value" },
    { no: 15, name: "notion", kind: "message", T: NotionMetadata, oneof: "value" },
    { no: 16, name: "discord", kind: "message", T: DiscordMetadata, oneof: "value" },
    { no: 17, name: "linear", kind: "message", T: LinearMetadata, oneof: "value" },
    { no: 18, name: "meeting_bot", kind: "message", T: MeetingBotMetadata, oneof: "value" },
]);
/**
 * @generated from message operand.v1.CollectionMetadata
 */
export class CollectionMetadata extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CollectionMetadata().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CollectionMetadata().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CollectionMetadata().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(CollectionMetadata, a, b);
    }
}
CollectionMetadata.runtime = proto3;
CollectionMetadata.typeName = "operand.v1.CollectionMetadata";
CollectionMetadata.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message operand.v1.TextMetadata
 */
export class TextMetadata extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string text = 1;
         */
        this.text = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TextMetadata().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TextMetadata().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TextMetadata().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(TextMetadata, a, b);
    }
}
TextMetadata.runtime = proto3;
TextMetadata.typeName = "operand.v1.TextMetadata";
TextMetadata.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message operand.v1.HTMLMetadata
 */
export class HTMLMetadata extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new HTMLMetadata().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new HTMLMetadata().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new HTMLMetadata().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(HTMLMetadata, a, b);
    }
}
HTMLMetadata.runtime = proto3;
HTMLMetadata.typeName = "operand.v1.HTMLMetadata";
HTMLMetadata.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "html", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
]);
/**
 * @generated from message operand.v1.MarkdownMetadata
 */
export class MarkdownMetadata extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MarkdownMetadata().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MarkdownMetadata().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MarkdownMetadata().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MarkdownMetadata, a, b);
    }
}
MarkdownMetadata.runtime = proto3;
MarkdownMetadata.typeName = "operand.v1.MarkdownMetadata";
MarkdownMetadata.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "markdown", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
]);
/**
 * The URL is stored in properties, not here.
 *
 * @generated from message operand.v1.RSSMetadata
 */
export class RSSMetadata extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RSSMetadata().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RSSMetadata().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RSSMetadata().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RSSMetadata, a, b);
    }
}
RSSMetadata.runtime = proto3;
RSSMetadata.typeName = "operand.v1.RSSMetadata";
RSSMetadata.fields = proto3.util.newFieldList(() => []);
/**
 * If the _url property is set, this metadata is auto-populated.
 *
 * @generated from message operand.v1.AudioMetadata
 */
export class AudioMetadata extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AudioMetadata().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AudioMetadata().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AudioMetadata().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(AudioMetadata, a, b);
    }
}
AudioMetadata.runtime = proto3;
AudioMetadata.typeName = "operand.v1.AudioMetadata";
AudioMetadata.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "file_ext", kind: "enum", T: proto3.getEnumType(AudioFileExt), opt: true },
    { no: 2, name: "audio", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
]);
/**
 * @generated from message operand.v1.PodcastMetadata
 */
export class PodcastMetadata extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string listennotes_id = 1;
         */
        this.listennotesId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PodcastMetadata().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PodcastMetadata().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PodcastMetadata().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PodcastMetadata, a, b);
    }
}
PodcastMetadata.runtime = proto3;
PodcastMetadata.typeName = "operand.v1.PodcastMetadata";
PodcastMetadata.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "listennotes_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message operand.v1.SitemapMetadata
 */
export class SitemapMetadata extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SitemapMetadata().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SitemapMetadata().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SitemapMetadata().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SitemapMetadata, a, b);
    }
}
SitemapMetadata.runtime = proto3;
SitemapMetadata.typeName = "operand.v1.SitemapMetadata";
SitemapMetadata.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "url_regex", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
]);
/**
 * @generated from message operand.v1.PDFMetadata
 */
export class PDFMetadata extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PDFMetadata().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PDFMetadata().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PDFMetadata().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PDFMetadata, a, b);
    }
}
PDFMetadata.runtime = proto3;
PDFMetadata.typeName = "operand.v1.PDFMetadata";
PDFMetadata.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "pdf", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
]);
/**
 * @generated from message operand.v1.EPUBMetadata
 */
export class EPUBMetadata extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EPUBMetadata().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EPUBMetadata().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EPUBMetadata().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EPUBMetadata, a, b);
    }
}
EPUBMetadata.runtime = proto3;
EPUBMetadata.typeName = "operand.v1.EPUBMetadata";
EPUBMetadata.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "epub", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
]);
/**
 * The URL is stored in properties, not here.
 *
 * @generated from message operand.v1.YouTubeMetadata
 */
export class YouTubeMetadata extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new YouTubeMetadata().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new YouTubeMetadata().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new YouTubeMetadata().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(YouTubeMetadata, a, b);
    }
}
YouTubeMetadata.runtime = proto3;
YouTubeMetadata.typeName = "operand.v1.YouTubeMetadata";
YouTubeMetadata.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message operand.v1.SlackMetadata
 */
export class SlackMetadata extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string bot_token = 1;
         */
        this.botToken = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SlackMetadata().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SlackMetadata().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SlackMetadata().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SlackMetadata, a, b);
    }
}
SlackMetadata.runtime = proto3;
SlackMetadata.typeName = "operand.v1.SlackMetadata";
SlackMetadata.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "bot_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "bot_user_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
]);
/**
 * @generated from message operand.v1.GithubRepositoryMetadata
 */
export class GithubRepositoryMetadata extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string access_token = 1;
         */
        this.accessToken = "";
        /**
         * @generated from field: string owner = 2;
         */
        this.owner = "";
        /**
         * @generated from field: string name = 3;
         */
        this.name = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GithubRepositoryMetadata().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GithubRepositoryMetadata().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GithubRepositoryMetadata().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GithubRepositoryMetadata, a, b);
    }
}
GithubRepositoryMetadata.runtime = proto3;
GithubRepositoryMetadata.typeName = "operand.v1.GithubRepositoryMetadata";
GithubRepositoryMetadata.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "access_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "ref", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
]);
/**
 * @generated from message operand.v1.SourceCodeMetadata
 */
export class SourceCodeMetadata extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: operand.v1.ProgrammingLanguage language = 1;
         */
        this.language = ProgrammingLanguage.UNSPECIFIED;
        /**
         * @generated from field: string source_code = 2;
         */
        this.sourceCode = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SourceCodeMetadata().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SourceCodeMetadata().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SourceCodeMetadata().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SourceCodeMetadata, a, b);
    }
}
SourceCodeMetadata.runtime = proto3;
SourceCodeMetadata.typeName = "operand.v1.SourceCodeMetadata";
SourceCodeMetadata.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "language", kind: "enum", T: proto3.getEnumType(ProgrammingLanguage) },
    { no: 2, name: "source_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message operand.v1.NotionMetadata
 */
export class NotionMetadata extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string token = 1;
         */
        this.token = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new NotionMetadata().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new NotionMetadata().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new NotionMetadata().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(NotionMetadata, a, b);
    }
}
NotionMetadata.runtime = proto3;
NotionMetadata.typeName = "operand.v1.NotionMetadata";
NotionMetadata.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message operand.v1.DiscordMetadata
 */
export class DiscordMetadata extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string guild_id = 1;
         */
        this.guildId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DiscordMetadata().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DiscordMetadata().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DiscordMetadata().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(DiscordMetadata, a, b);
    }
}
DiscordMetadata.runtime = proto3;
DiscordMetadata.typeName = "operand.v1.DiscordMetadata";
DiscordMetadata.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "guild_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message operand.v1.LinearMetadata
 */
export class LinearMetadata extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string access_token = 1;
         */
        this.accessToken = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new LinearMetadata().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new LinearMetadata().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new LinearMetadata().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(LinearMetadata, a, b);
    }
}
LinearMetadata.runtime = proto3;
LinearMetadata.typeName = "operand.v1.LinearMetadata";
LinearMetadata.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "access_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message operand.v1.MeetingBotMetadata
 */
export class MeetingBotMetadata extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MeetingBotMetadata().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MeetingBotMetadata().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MeetingBotMetadata().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MeetingBotMetadata, a, b);
    }
}
MeetingBotMetadata.runtime = proto3;
MeetingBotMetadata.typeName = "operand.v1.MeetingBotMetadata";
MeetingBotMetadata.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message operand.v1.Properties
 */
export class Properties extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: map<string, operand.v1.Property> properties = 1;
         */
        this.properties = {};
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Properties().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Properties().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Properties().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Properties, a, b);
    }
}
Properties.runtime = proto3;
Properties.typeName = "operand.v1.Properties";
Properties.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "properties", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: Property } },
]);
/**
 * @generated from message operand.v1.Property
 */
export class Property extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bool indexed = 1;
         */
        this.indexed = false;
        /**
         * @generated from oneof operand.v1.Property.value
         */
        this.value = { case: undefined };
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Property().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Property().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Property().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Property, a, b);
    }
}
Property.runtime = proto3;
Property.typeName = "operand.v1.Property";
Property.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "indexed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "value" },
    { no: 3, name: "number", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, oneof: "value" },
    { no: 4, name: "text_array", kind: "message", T: TextArray, oneof: "value" },
    { no: 5, name: "number_array", kind: "message", T: NumberArray, oneof: "value" },
]);
/**
 * @generated from message operand.v1.TextArray
 */
export class TextArray extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated string values = 1;
         */
        this.values = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TextArray().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TextArray().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TextArray().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(TextArray, a, b);
    }
}
TextArray.runtime = proto3;
TextArray.typeName = "operand.v1.TextArray";
TextArray.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "values", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * @generated from message operand.v1.NumberArray
 */
export class NumberArray extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated double values = 1;
         */
        this.values = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new NumberArray().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new NumberArray().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new NumberArray().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(NumberArray, a, b);
    }
}
NumberArray.runtime = proto3;
NumberArray.typeName = "operand.v1.NumberArray";
NumberArray.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "values", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, repeated: true },
]);
/**
 * @generated from message operand.v1.UserProfile
 */
export class UserProfile extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string public_id = 1;
         */
        this.publicId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UserProfile().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UserProfile().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UserProfile().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(UserProfile, a, b);
    }
}
UserProfile.runtime = proto3;
UserProfile.typeName = "operand.v1.UserProfile";
UserProfile.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "public_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "handle", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "created_at", kind: "message", T: Timestamp },
    { no: 5, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "bio", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "avatar_url", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
]);
/**
 * @generated from message operand.v1.Author
 */
export class Author extends Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof operand.v1.Author.author
         */
        this.author = { case: undefined };
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Author().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Author().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Author().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Author, a, b);
    }
}
Author.runtime = proto3;
Author.typeName = "operand.v1.Author";
Author.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "profile", kind: "message", T: UserProfile, oneof: "author" },
    { no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "author" },
]);
/**
 * @generated from message operand.v1.ObjectPreview
 */
export class ObjectPreview extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated operand.v1.Author authors = 5;
         */
        this.authors = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ObjectPreview().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ObjectPreview().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ObjectPreview().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ObjectPreview, a, b);
    }
}
ObjectPreview.runtime = proto3;
ObjectPreview.typeName = "operand.v1.ObjectPreview";
ObjectPreview.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "image", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "authors", kind: "message", T: Author, repeated: true },
]);
/**
 * @generated from message operand.v1.IndexingProgress
 */
export class IndexingProgress extends Message {
    constructor(data) {
        super();
        /**
         * 0.0 - 1.0
         *
         * @generated from field: float percent_ready = 1;
         */
        this.percentReady = 0;
        /**
         * @generated from field: map<string, int32> status_counts = 2;
         */
        this.statusCounts = {};
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new IndexingProgress().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new IndexingProgress().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new IndexingProgress().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(IndexingProgress, a, b);
    }
}
IndexingProgress.runtime = proto3;
IndexingProgress.typeName = "operand.v1.IndexingProgress";
IndexingProgress.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "percent_ready", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 2, name: "status_counts", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "scalar", T: 5 /* ScalarType.INT32 */ } },
]);
/**
 * @generated from message operand.v1.Object
 */
export class Object$ extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string id = 1;
         */
        this.id = "";
        /**
         * @generated from field: operand.v1.ObjectType type = 5;
         */
        this.type = ObjectType.UNSPECIFIED;
        /**
         * @generated from field: operand.v1.ObjectStatus status = 8;
         */
        this.status = ObjectStatus.UNSPECIFIED;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Object$().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Object$().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Object$().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Object$, a, b);
    }
}
Object$.runtime = proto3;
Object$.typeName = "operand.v1.Object";
Object$.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "created_at", kind: "message", T: Timestamp },
    { no: 3, name: "updated_at", kind: "message", T: Timestamp, opt: true },
    { no: 4, name: "parent_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "type", kind: "enum", T: proto3.getEnumType(ObjectType) },
    { no: 6, name: "metadata", kind: "message", T: ObjectMetadata, opt: true },
    { no: 7, name: "properties", kind: "message", T: Properties },
    { no: 8, name: "status", kind: "enum", T: proto3.getEnumType(ObjectStatus) },
    { no: 9, name: "preview", kind: "message", T: ObjectPreview, opt: true },
    { no: 10, name: "indexing_progress", kind: "message", T: IndexingProgress, opt: true },
    { no: 11, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
]);
/**
 * @generated from message operand.v1.ObjectOptions
 */
export class ObjectOptions extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ObjectOptions().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ObjectOptions().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ObjectOptions().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ObjectOptions, a, b);
    }
}
ObjectOptions.runtime = proto3;
ObjectOptions.typeName = "operand.v1.ObjectOptions";
ObjectOptions.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "include_metadata", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 2, name: "include_preview", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 3, name: "include_indexing_progress", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
]);
/**
 * @generated from message operand.v1.UpsertRequest
 */
export class UpsertRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpsertRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpsertRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpsertRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(UpsertRequest, a, b);
    }
}
UpsertRequest.runtime = proto3;
UpsertRequest.typeName = "operand.v1.UpsertRequest";
UpsertRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "existing_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "parent_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "type", kind: "enum", T: proto3.getEnumType(ObjectType), opt: true },
    { no: 4, name: "metadata", kind: "message", T: ObjectMetadata, opt: true },
    { no: 5, name: "properties", kind: "message", T: Properties, opt: true },
    { no: 6, name: "unique_property", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
]);
/**
 * @generated from message operand.v1.UpsertResponse
 */
export class UpsertResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpsertResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpsertResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpsertResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(UpsertResponse, a, b);
    }
}
UpsertResponse.runtime = proto3;
UpsertResponse.typeName = "operand.v1.UpsertResponse";
UpsertResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "object", kind: "message", T: Object$ },
]);
/**
 * @generated from message operand.v1.SuggestionsRequest
 */
export class SuggestionsRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string query = 1;
         */
        this.query = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SuggestionsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SuggestionsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SuggestionsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SuggestionsRequest, a, b);
    }
}
SuggestionsRequest.runtime = proto3;
SuggestionsRequest.typeName = "operand.v1.SuggestionsRequest";
SuggestionsRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(ObjectType), opt: true },
]);
/**
 * @generated from message operand.v1.SuggestionsResponse
 */
export class SuggestionsResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated operand.v1.SuggestionsResponse.AnnotatedUpsert upserts = 1;
         */
        this.upserts = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SuggestionsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SuggestionsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SuggestionsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SuggestionsResponse, a, b);
    }
}
SuggestionsResponse.runtime = proto3;
SuggestionsResponse.typeName = "operand.v1.SuggestionsResponse";
SuggestionsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "upserts", kind: "message", T: SuggestionsResponse_AnnotatedUpsert, repeated: true },
]);
/**
 * @generated from message operand.v1.SuggestionsResponse.AnnotatedUpsert
 */
export class SuggestionsResponse_AnnotatedUpsert extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string description = 2;
         */
        this.description = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SuggestionsResponse_AnnotatedUpsert().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SuggestionsResponse_AnnotatedUpsert().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SuggestionsResponse_AnnotatedUpsert().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SuggestionsResponse_AnnotatedUpsert, a, b);
    }
}
SuggestionsResponse_AnnotatedUpsert.runtime = proto3;
SuggestionsResponse_AnnotatedUpsert.typeName = "operand.v1.SuggestionsResponse.AnnotatedUpsert";
SuggestionsResponse_AnnotatedUpsert.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "upsert", kind: "message", T: UpsertRequest },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "page_estimate", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
]);
/**
 * @generated from message operand.v1.ListRequest
 */
export class ListRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ListRequest, a, b);
    }
}
ListRequest.runtime = proto3;
ListRequest.typeName = "operand.v1.ListRequest";
ListRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "parent_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 4, name: "options", kind: "message", T: ObjectOptions, opt: true },
]);
/**
 * @generated from message operand.v1.ListResponse
 */
export class ListResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated operand.v1.Object objects = 1;
         */
        this.objects = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ListResponse, a, b);
    }
}
ListResponse.runtime = proto3;
ListResponse.typeName = "operand.v1.ListResponse";
ListResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "objects", kind: "message", T: Object$, repeated: true },
    { no: 2, name: "next_cursor", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
]);
/**
 * @generated from message operand.v1.GetRequest
 */
export class GetRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated string ids = 1;
         */
        this.ids = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GetRequest, a, b);
    }
}
GetRequest.runtime = proto3;
GetRequest.typeName = "operand.v1.GetRequest";
GetRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "options", kind: "message", T: ObjectOptions, opt: true },
]);
/**
 * @generated from message operand.v1.GetResponse
 */
export class GetResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated operand.v1.Object objects = 1;
         */
        this.objects = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GetResponse, a, b);
    }
}
GetResponse.runtime = proto3;
GetResponse.typeName = "operand.v1.GetResponse";
GetResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "objects", kind: "message", T: Object$, repeated: true },
]);
/**
 * @generated from message operand.v1.DeleteRequest
 */
export class DeleteRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated string ids = 1;
         */
        this.ids = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(DeleteRequest, a, b);
    }
}
DeleteRequest.runtime = proto3;
DeleteRequest.typeName = "operand.v1.DeleteRequest";
DeleteRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * @generated from message operand.v1.DeleteResponse
 */
export class DeleteResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(DeleteResponse, a, b);
    }
}
DeleteResponse.runtime = proto3;
DeleteResponse.typeName = "operand.v1.DeleteResponse";
DeleteResponse.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message operand.v1.CountRequest
 */
export class CountRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CountRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CountRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CountRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(CountRequest, a, b);
    }
}
CountRequest.runtime = proto3;
CountRequest.typeName = "operand.v1.CountRequest";
CountRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "parent_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
]);
/**
 * @generated from message operand.v1.CountResponse
 */
export class CountResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: int32 count = 1;
         */
        this.count = 0;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CountResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CountResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CountResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(CountResponse, a, b);
    }
}
CountResponse.runtime = proto3;
CountResponse.typeName = "operand.v1.CountResponse";
CountResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
]);
/**
 * @generated from message operand.v1.Filter
 */
export class Filter extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated operand.v1.Condition conditions = 1;
         */
        this.conditions = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Filter().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Filter().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Filter().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Filter, a, b);
    }
}
Filter.runtime = proto3;
Filter.typeName = "operand.v1.Filter";
Filter.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "conditions", kind: "message", T: Condition, repeated: true },
]);
/**
 * @generated from message operand.v1.NotCondition
 */
export class NotCondition extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new NotCondition().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new NotCondition().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new NotCondition().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(NotCondition, a, b);
    }
}
NotCondition.runtime = proto3;
NotCondition.typeName = "operand.v1.NotCondition";
NotCondition.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "condition", kind: "message", T: Condition },
]);
/**
 * @generated from message operand.v1.Condition
 */
export class Condition extends Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof operand.v1.Condition.condition
         */
        this.condition = { case: undefined };
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Condition().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Condition().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Condition().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Condition, a, b);
    }
}
Condition.runtime = proto3;
Condition.typeName = "operand.v1.Condition";
Condition.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "property", kind: "message", T: KeyedProperty, oneof: "condition" },
    { no: 2, name: "range", kind: "message", T: Range, oneof: "condition" },
    { no: 3, name: "and", kind: "message", T: Filter, oneof: "condition" },
    { no: 4, name: "or", kind: "message", T: Filter, oneof: "condition" },
    { no: 5, name: "not", kind: "message", T: NotCondition, oneof: "condition" },
]);
/**
 * @generated from message operand.v1.KeyedProperty
 */
export class KeyedProperty extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string key = 1;
         */
        this.key = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new KeyedProperty().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new KeyedProperty().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new KeyedProperty().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(KeyedProperty, a, b);
    }
}
KeyedProperty.runtime = proto3;
KeyedProperty.typeName = "operand.v1.KeyedProperty";
KeyedProperty.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "property", kind: "message", T: Property },
]);
/**
 * @generated from message operand.v1.Range
 */
export class Range extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string key = 1;
         */
        this.key = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Range().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Range().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Range().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Range, a, b);
    }
}
Range.runtime = proto3;
Range.typeName = "operand.v1.Range";
Range.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "lt", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, opt: true },
    { no: 3, name: "lte", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, opt: true },
    { no: 4, name: "gt", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, opt: true },
    { no: 5, name: "gte", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, opt: true },
]);
/**
 * @generated from message operand.v1.SearchWithinRequest
 */
export class SearchWithinRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string query = 1;
         */
        this.query = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SearchWithinRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SearchWithinRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SearchWithinRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SearchWithinRequest, a, b);
    }
}
SearchWithinRequest.runtime = proto3;
SearchWithinRequest.typeName = "operand.v1.SearchWithinRequest";
SearchWithinRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 3, name: "filter", kind: "message", T: Filter, opt: true },
    { no: 4, name: "object_options", kind: "message", T: ObjectOptions, opt: true },
]);
/**
 * @generated from message operand.v1.SearchWithinResponse
 */
export class SearchWithinResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated operand.v1.SearchWithinResponse.Match matches = 1;
         */
        this.matches = [];
        /**
         * @generated from field: map<string, operand.v1.Object> objects = 2;
         */
        this.objects = {};
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SearchWithinResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SearchWithinResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SearchWithinResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SearchWithinResponse, a, b);
    }
}
SearchWithinResponse.runtime = proto3;
SearchWithinResponse.typeName = "operand.v1.SearchWithinResponse";
SearchWithinResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "matches", kind: "message", T: SearchWithinResponse_Match, repeated: true },
    { no: 2, name: "objects", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: Object$ } },
]);
/**
 * @generated from message operand.v1.SearchWithinResponse.Match
 */
export class SearchWithinResponse_Match extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string match_id = 1;
         */
        this.matchId = "";
        /**
         * @generated from field: string object_id = 2;
         */
        this.objectId = "";
        /**
         * @generated from field: string content = 3;
         */
        this.content = "";
        /**
         * @generated from field: float score = 4;
         */
        this.score = 0;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SearchWithinResponse_Match().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SearchWithinResponse_Match().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SearchWithinResponse_Match().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SearchWithinResponse_Match, a, b);
    }
}
SearchWithinResponse_Match.runtime = proto3;
SearchWithinResponse_Match.typeName = "operand.v1.SearchWithinResponse.Match";
SearchWithinResponse_Match.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "match_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "object_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "score", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 5, name: "extra", kind: "message", T: Properties, opt: true },
]);
/**
 * Answer is an attempt to answer a question.
 *
 * @generated from message operand.v1.Answer
 */
export class Answer extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string answer = 1;
         */
        this.answer = "";
        /**
         * Confidence is a value between 0 and 1, where 1 is the highest confidence.
         * It indicates how confident we are that the answer is factually correct, using
         * the index content as the ground truth.
         *
         * @generated from field: float confidence = 2;
         */
        this.confidence = 0;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Answer().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Answer().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Answer().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Answer, a, b);
    }
}
Answer.runtime = proto3;
Answer.typeName = "operand.v1.Answer";
Answer.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "answer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "confidence", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
]);
/**
 * @generated from message operand.v1.AnswerRequest
 */
export class AnswerRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string query = 1;
         */
        this.query = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AnswerRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AnswerRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AnswerRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(AnswerRequest, a, b);
    }
}
AnswerRequest.runtime = proto3;
AnswerRequest.typeName = "operand.v1.AnswerRequest";
AnswerRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "filter", kind: "message", T: Filter, opt: true },
    { no: 3, name: "object_options", kind: "message", T: ObjectOptions, opt: true },
]);
/**
 * @generated from message operand.v1.AnswerResponse
 */
export class AnswerResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated operand.v1.Object sources = 2;
         */
        this.sources = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AnswerResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AnswerResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AnswerResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(AnswerResponse, a, b);
    }
}
AnswerResponse.runtime = proto3;
AnswerResponse.typeName = "operand.v1.AnswerResponse";
AnswerResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "answer", kind: "message", T: Answer, opt: true },
    { no: 2, name: "sources", kind: "message", T: Object$, repeated: true },
]);
