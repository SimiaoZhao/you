// @generated by protoc-gen-es v0.1.1 with parameter "target=ts+js"
// @generated from file operand/v1/notification.proto (package operand.v1, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
/**
 * PendingRequest is the request for the Pending method.
 *
 * @generated from message operand.v1.PendingRequest
 */
export class PendingRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: int32 limit = 1;
         */
        this.limit = 0;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PendingRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PendingRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PendingRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PendingRequest, a, b);
    }
}
PendingRequest.runtime = proto3;
PendingRequest.typeName = "operand.v1.PendingRequest";
PendingRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
]);
/**
 * NotificationAction contains an action that can be taken on a notification.
 *
 * @generated from message operand.v1.NotificationAction
 */
export class NotificationAction extends Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof operand.v1.NotificationAction.action
         */
        this.action = { case: undefined };
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new NotificationAction().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new NotificationAction().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new NotificationAction().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(NotificationAction, a, b);
    }
}
NotificationAction.runtime = proto3;
NotificationAction.typeName = "operand.v1.NotificationAction";
NotificationAction.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "none", kind: "message", T: NotificationAction_None, oneof: "action" },
    { no: 2, name: "redirect_to", kind: "message", T: NotificationAction_RedirectTo, oneof: "action" },
]);
/**
 * @generated from message operand.v1.NotificationAction.None
 */
export class NotificationAction_None extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new NotificationAction_None().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new NotificationAction_None().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new NotificationAction_None().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(NotificationAction_None, a, b);
    }
}
NotificationAction_None.runtime = proto3;
NotificationAction_None.typeName = "operand.v1.NotificationAction.None";
NotificationAction_None.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message operand.v1.NotificationAction.RedirectTo
 */
export class NotificationAction_RedirectTo extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string url = 1;
         */
        this.url = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new NotificationAction_RedirectTo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new NotificationAction_RedirectTo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new NotificationAction_RedirectTo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(NotificationAction_RedirectTo, a, b);
    }
}
NotificationAction_RedirectTo.runtime = proto3;
NotificationAction_RedirectTo.typeName = "operand.v1.NotificationAction.RedirectTo";
NotificationAction_RedirectTo.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Notification is a notification sent to a user.
 *
 * @generated from message operand.v1.Notification
 */
export class Notification extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string id = 1;
         */
        this.id = "";
        /**
         * @generated from field: string title = 3;
         */
        this.title = "";
        /**
         * @generated from field: string body = 4;
         */
        this.body = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Notification().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Notification().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Notification().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Notification, a, b);
    }
}
Notification.runtime = proto3;
Notification.typeName = "operand.v1.Notification";
Notification.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "created_at", kind: "message", T: Timestamp },
    { no: 3, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "action", kind: "message", T: NotificationAction },
]);
/**
 * PendingResponse is the response for the Pending method.
 *
 * @generated from message operand.v1.PendingResponse
 */
export class PendingResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated operand.v1.Notification notifications = 1;
         */
        this.notifications = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PendingResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PendingResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PendingResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PendingResponse, a, b);
    }
}
PendingResponse.runtime = proto3;
PendingResponse.typeName = "operand.v1.PendingResponse";
PendingResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "notifications", kind: "message", T: Notification, repeated: true },
    { no: 2, name: "next_cursor", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
]);
/**
 * AcknowledgeRequest is the request for the Acknowledge method.
 *
 * @generated from message operand.v1.AcknowledgeRequest
 */
export class AcknowledgeRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated string ids = 1;
         */
        this.ids = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AcknowledgeRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AcknowledgeRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AcknowledgeRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(AcknowledgeRequest, a, b);
    }
}
AcknowledgeRequest.runtime = proto3;
AcknowledgeRequest.typeName = "operand.v1.AcknowledgeRequest";
AcknowledgeRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * AcknowledgeResponse is the response for the Acknowledge method.
 *
 * @generated from message operand.v1.AcknowledgeResponse
 */
export class AcknowledgeResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AcknowledgeResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AcknowledgeResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AcknowledgeResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(AcknowledgeResponse, a, b);
    }
}
AcknowledgeResponse.runtime = proto3;
AcknowledgeResponse.typeName = "operand.v1.AcknowledgeResponse";
AcknowledgeResponse.fields = proto3.util.newFieldList(() => []);
/**
 * NotificationSettings contains the notification settings for a user.
 *
 * @generated from message operand.v1.NotificationSettings
 */
export class NotificationSettings extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bool disable_emails = 1;
         */
        this.disableEmails = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new NotificationSettings().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new NotificationSettings().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new NotificationSettings().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(NotificationSettings, a, b);
    }
}
NotificationSettings.runtime = proto3;
NotificationSettings.typeName = "operand.v1.NotificationSettings";
NotificationSettings.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "disable_emails", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * SettingsRequest is the request for the Settings method.
 *
 * @generated from message operand.v1.SettingsRequest
 */
export class SettingsRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SettingsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SettingsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SettingsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SettingsRequest, a, b);
    }
}
SettingsRequest.runtime = proto3;
SettingsRequest.typeName = "operand.v1.SettingsRequest";
SettingsRequest.fields = proto3.util.newFieldList(() => []);
/**
 * SettingsResponse is the response for the Settings method.
 *
 * @generated from message operand.v1.SettingsResponse
 */
export class SettingsResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SettingsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SettingsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SettingsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SettingsResponse, a, b);
    }
}
SettingsResponse.runtime = proto3;
SettingsResponse.typeName = "operand.v1.SettingsResponse";
SettingsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "settings", kind: "message", T: NotificationSettings },
]);
/**
 * UpdateSettingsRequest is the request for the UpdateSettings method.
 *
 * @generated from message operand.v1.UpdateSettingsRequest
 */
export class UpdateSettingsRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpdateSettingsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpdateSettingsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpdateSettingsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(UpdateSettingsRequest, a, b);
    }
}
UpdateSettingsRequest.runtime = proto3;
UpdateSettingsRequest.typeName = "operand.v1.UpdateSettingsRequest";
UpdateSettingsRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "settings", kind: "message", T: NotificationSettings },
]);
/**
 * UpdateSettingsResponse is the response for the UpdateSettings method.
 *
 * @generated from message operand.v1.UpdateSettingsResponse
 */
export class UpdateSettingsResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpdateSettingsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpdateSettingsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpdateSettingsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(UpdateSettingsResponse, a, b);
    }
}
UpdateSettingsResponse.runtime = proto3;
UpdateSettingsResponse.typeName = "operand.v1.UpdateSettingsResponse";
UpdateSettingsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "settings", kind: "message", T: NotificationSettings },
]);
