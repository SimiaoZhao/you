import { AvailableExplorationsRequest, AvailableExplorationsResponse, CreateExplorationRequest, CreateExplorationResponse, CreateIndexRequest, CreateIndexResponse, DeleteExplorationRequest, DeleteExplorationResponse, DeleteIndexRequest, DeleteIndexResponse, GetExplorationRequest, GetExplorationResponse, GetIndexRequest, GetIndexResponse, InviteRequest, InviteResponse, ListExplorationsRequest, ListExplorationsResponse, ListIndexesRequest, ListIndexesResponse, SubscribeRequest, SubscribeResponse, SubscribersOfRequest, SubscribersOfResponse, SubscriptionsRequest, SubscriptionsResponse, UnsubscribeRequest, UnsubscribeResponse, UpdateIndexRequest, UpdateIndexResponse } from "./index_pb.js";
import { MethodKind } from "@bufbuild/protobuf";
/**
 * IndexService manages the users set of configured indexes. This includes
 * both the indexes they've personally created, as well as the indexes they've
 * subscribed to (i.e. public indexes).
 *
 * @generated from service operand.v1.IndexService
 */
export declare const IndexService: {
    readonly typeName: "operand.v1.IndexService";
    readonly methods: {
        /**
         * Allows the user to create a new index that they own.
         *
         * @generated from rpc operand.v1.IndexService.CreateIndex
         */
        readonly createIndex: {
            readonly name: "CreateIndex";
            readonly I: typeof CreateIndexRequest;
            readonly O: typeof CreateIndexResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         * ListIndexes returns a list of indexes that this or another user owns.
         *
         * @generated from rpc operand.v1.IndexService.ListIndexes
         */
        readonly listIndexes: {
            readonly name: "ListIndexes";
            readonly I: typeof ListIndexesRequest;
            readonly O: typeof ListIndexesResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         * GetIndex returns the details of a single index. The response also includes
         * additional information about the index, i.e. usage information, social data,
         * if requested by the caller.
         *
         * @generated from rpc operand.v1.IndexService.GetIndex
         */
        readonly getIndex: {
            readonly name: "GetIndex";
            readonly I: typeof GetIndexRequest;
            readonly O: typeof GetIndexResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         * UpdateIndex allows the user to update the details of an index. For now,
         * this operation is very limited, and only allows the user to toggle a few
         * smaller metadata-like settings on the index.
         *
         * @generated from rpc operand.v1.IndexService.UpdateIndex
         */
        readonly updateIndex: {
            readonly name: "UpdateIndex";
            readonly I: typeof UpdateIndexRequest;
            readonly O: typeof UpdateIndexResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         * DeleteIndex allows the user to delete an index. This operation will complete
         * instantly, but it will take a few minutes for the index to be fully deleted.
         * Another note is that any subscribers to this index will be notified that the
         * index has been deleted, and will therefore be unable to use it any more.
         *
         * @generated from rpc operand.v1.IndexService.DeleteIndex
         */
        readonly deleteIndex: {
            readonly name: "DeleteIndex";
            readonly I: typeof DeleteIndexRequest;
            readonly O: typeof DeleteIndexResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         * Subscriptions returns the list of indexes that this, or another user has subscribed to.
         *
         * @generated from rpc operand.v1.IndexService.Subscriptions
         */
        readonly subscriptions: {
            readonly name: "Subscriptions";
            readonly I: typeof SubscriptionsRequest;
            readonly O: typeof SubscriptionsResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         * Subscribe allows the user to subscribe to a public index.
         *
         * @generated from rpc operand.v1.IndexService.Subscribe
         */
        readonly subscribe: {
            readonly name: "Subscribe";
            readonly I: typeof SubscribeRequest;
            readonly O: typeof SubscribeResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         * Unsubscribe allows the user to unsubscribe from a public index.
         * This endpoint also allows the owner of an index to manually unsubscribe a subscriber,
         * essentially, a "kick" operation. This is important for private indexes (i.e. teams).
         *
         * @generated from rpc operand.v1.IndexService.Unsubscribe
         */
        readonly unsubscribe: {
            readonly name: "Unsubscribe";
            readonly I: typeof UnsubscribeRequest;
            readonly O: typeof UnsubscribeResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         * Invite allows a user to invite another user to subscribe to an index.
         * A few notes:
         * - The user must be the owner of the index.
         * - The index need not be public, it's possible to invite users to private indexes.
         * - The user must not already be subscribed to the index (an error will be returned).
         * - The target user need not exist, an invitation will be sent to them, and they will
         *   be given the option to create an account before accepting the invitation.
         *
         * @generated from rpc operand.v1.IndexService.Invite
         */
        readonly invite: {
            readonly name: "Invite";
            readonly I: typeof InviteRequest;
            readonly O: typeof InviteResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         * SubscribersOf returns the list of users that have subscribed to an index.
         *
         * @generated from rpc operand.v1.IndexService.SubscribersOf
         */
        readonly subscribersOf: {
            readonly name: "SubscribersOf";
            readonly I: typeof SubscribersOfRequest;
            readonly O: typeof SubscribersOfResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         * AvailableExplorations returns the list of explorations that are available for an index.
         *
         * @generated from rpc operand.v1.IndexService.AvailableExplorations
         */
        readonly availableExplorations: {
            readonly name: "AvailableExplorations";
            readonly I: typeof AvailableExplorationsRequest;
            readonly O: typeof AvailableExplorationsResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         * CreateExploration allows the user to create a new exploration for an index.
         *
         * @generated from rpc operand.v1.IndexService.CreateExploration
         */
        readonly createExploration: {
            readonly name: "CreateExploration";
            readonly I: typeof CreateExplorationRequest;
            readonly O: typeof CreateExplorationResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         * DeleteExploration allows the user to delete an exploration from an index.
         *
         * @generated from rpc operand.v1.IndexService.DeleteExploration
         */
        readonly deleteExploration: {
            readonly name: "DeleteExploration";
            readonly I: typeof DeleteExplorationRequest;
            readonly O: typeof DeleteExplorationResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         * ListExplorations returns the list of explorations that have been created for an index.
         *
         * @generated from rpc operand.v1.IndexService.ListExplorations
         */
        readonly listExplorations: {
            readonly name: "ListExplorations";
            readonly I: typeof ListExplorationsRequest;
            readonly O: typeof ListExplorationsResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         * GetExploration returns the details of a single exploration that was created for an index.
         *
         * @generated from rpc operand.v1.IndexService.GetExploration
         */
        readonly getExploration: {
            readonly name: "GetExploration";
            readonly I: typeof GetExplorationRequest;
            readonly O: typeof GetExplorationResponse;
            readonly kind: MethodKind.Unary;
        };
    };
};
