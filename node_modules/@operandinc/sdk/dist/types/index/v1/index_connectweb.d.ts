import { AnswerRequest, AnswerResponse, BulkDeleteObjectsRequest, BulkDeleteObjectsResponse, BulkUpsertObjectsRequest, BulkUpsertObjectsResponse, CountObjectsRequest, CountObjectsResponse, DeleteObjectRequest, DeleteObjectResponse, FeedbackRequest, FeedbackResponse, GetObjectsRequest, GetObjectsResponse, ListObjectsRequest, ListObjectsResponse, SearchRequest, SearchResponse, UpsertObjectRequest, UpsertObjectResponse, WebhookRequest, WebhookResponse } from "./index_pb.js";
import { MethodKind } from "@bufbuild/protobuf";
/**
 * IndexService is accessed via API key(s), and is used to access
 * and/or perform operations on an index.
 *
 * @generated from service index.v1.IndexService
 */
export declare const IndexService: {
    readonly typeName: "index.v1.IndexService";
    readonly methods: {
        /**
         * UpsertObject lets you insert or update an object within the index.
         *
         * @generated from rpc index.v1.IndexService.UpsertObject
         */
        readonly upsertObject: {
            readonly name: "UpsertObject";
            readonly I: typeof UpsertObjectRequest;
            readonly O: typeof UpsertObjectResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         * BulkUpsertObjects lets you insert or update multiple objects within the index.
         *
         * @generated from rpc index.v1.IndexService.BulkUpsertObjects
         */
        readonly bulkUpsertObjects: {
            readonly name: "BulkUpsertObjects";
            readonly I: typeof BulkUpsertObjectsRequest;
            readonly O: typeof BulkUpsertObjectsResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         * ListObjects is used to list objects within the index.
         *
         * @generated from rpc index.v1.IndexService.ListObjects
         */
        readonly listObjects: {
            readonly name: "ListObjects";
            readonly I: typeof ListObjectsRequest;
            readonly O: typeof ListObjectsResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         * GetObjects is used to get specific objects within the index.
         *
         * @generated from rpc index.v1.IndexService.GetObjects
         */
        readonly getObjects: {
            readonly name: "GetObjects";
            readonly I: typeof GetObjectsRequest;
            readonly O: typeof GetObjectsResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         * DeleteObject deletes an object, and all of its children.
         *
         * @generated from rpc index.v1.IndexService.DeleteObject
         */
        readonly deleteObject: {
            readonly name: "DeleteObject";
            readonly I: typeof DeleteObjectRequest;
            readonly O: typeof DeleteObjectResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         * BulkDeleteObjects deletes multiple objects, and all of their children.
         * This is a big operation, so it is done in the background and returns instantly.
         *
         * @generated from rpc index.v1.IndexService.BulkDeleteObjects
         */
        readonly bulkDeleteObjects: {
            readonly name: "BulkDeleteObjects";
            readonly I: typeof BulkDeleteObjectsRequest;
            readonly O: typeof BulkDeleteObjectsResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         * CountObjects counts the number of objects within the index,
         * at a given level in the tree (i.e. given parent, possibly nil).
         *
         * @generated from rpc index.v1.IndexService.CountObjects
         */
        readonly countObjects: {
            readonly name: "CountObjects";
            readonly I: typeof CountObjectsRequest;
            readonly O: typeof CountObjectsResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         * Webhook is used to send webhooks to particular objects, essentially, letting
         * you interact with a given object of a specific type. Different object types
         * accept different webhooks.
         *
         * @generated from rpc index.v1.IndexService.Webhook
         */
        readonly webhook: {
            readonly name: "Webhook";
            readonly I: typeof WebhookRequest;
            readonly O: typeof WebhookResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         * Search returns the top-K matching objects for a given query,
         * along with content snippet(s) for each match.
         *
         * @generated from rpc index.v1.IndexService.Search
         */
        readonly search: {
            readonly name: "Search";
            readonly I: typeof SearchRequest;
            readonly O: typeof SearchResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         * Answer optionally returns an answer to a natural language question.
         * Along with the answer, we return a confidence level which should be checked
         * against a threshold before displaying the answer to the user.
         *
         * @generated from rpc index.v1.IndexService.Answer
         */
        readonly answer: {
            readonly name: "Answer";
            readonly I: typeof AnswerRequest;
            readonly O: typeof AnswerResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         * Feedback is used to give anonymous feedback to the API on search performance.
         * For example, if a user clicks a document, we want to which document was clicked
         * in response to what search query.
         *
         * @generated from rpc index.v1.IndexService.Feedback
         */
        readonly feedback: {
            readonly name: "Feedback";
            readonly I: typeof FeedbackRequest;
            readonly O: typeof FeedbackResponse;
            readonly kind: MethodKind.Unary;
        };
    };
};
