import { BillingStatusRequest, BillingStatusResponse, ConfigureBillingRequest, ConfigureBillingResponse, FinalizeLoginRequest, FinalizeLoginResponse, GetProfileRequest, GetProfileResponse, LoginRequest, LoginResponse, ManageBillingRequest, ManageBillingResponse, OAuthLinkRequest, OAuthLinkResponse, UpdateProfileRequest, UpdateProfileResponse } from "./user_pb.js";
import { MethodKind } from "@bufbuild/protobuf";
/**
 * UserService provides the service for managing users, i.e. authentication, sessions,
 * profiles, as well as managing billing. Note: Requests will be authenticated if they
 * include an `Authorization` header, which includes the session token as the value.
 *
 * @generated from service web.v1.UserService
 */
export declare const UserService: {
    readonly typeName: "web.v1.UserService";
    readonly methods: {
        /**
         * Login initiates a login flow for the user. They are sent an email which they must
         * click to confirm their login. The user then calls `FinalizeLogin`, which allows them
         * to exchange the login token for a session token.
         *
         * @generated from rpc web.v1.UserService.Login
         */
        readonly login: {
            readonly name: "Login";
            readonly I: typeof LoginRequest;
            readonly O: typeof LoginResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         * FinalizeLogin exchanges a login token for a session token.
         *
         * @generated from rpc web.v1.UserService.FinalizeLogin
         */
        readonly finalizeLogin: {
            readonly name: "FinalizeLogin";
            readonly I: typeof FinalizeLoginRequest;
            readonly O: typeof FinalizeLoginResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         * GetProfile returns the profile of the user. This endpoint can also be used as a way
         * to check the validity of a session. If a handle is specified, this endpoint will return
         * the profile of another user.
         *
         * @generated from rpc web.v1.UserService.GetProfile
         */
        readonly getProfile: {
            readonly name: "GetProfile";
            readonly I: typeof GetProfileRequest;
            readonly O: typeof GetProfileResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         * UpdateProfile updates the profile of the user. For example, by allowing them to configure
         * their handle, and in the future, name, avatar, etc.
         *
         * @generated from rpc web.v1.UserService.UpdateProfile
         */
        readonly updateProfile: {
            readonly name: "UpdateProfile";
            readonly I: typeof UpdateProfileRequest;
            readonly O: typeof UpdateProfileResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         * BillingStatus returns the current billing status of the user.
         *
         * @generated from rpc web.v1.UserService.BillingStatus
         */
        readonly billingStatus: {
            readonly name: "BillingStatus";
            readonly I: typeof BillingStatusRequest;
            readonly O: typeof BillingStatusResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         * ConfigureBilling allows the user to configure billing for the first time. If the user
         * has already configured billing successfully, then this will return an error. In this case,
         * the user should use the `ManageBilling` endpoint which will return a link to a billing page
         * to manage their billing and subscription settings.
         *
         * @generated from rpc web.v1.UserService.ConfigureBilling
         */
        readonly configureBilling: {
            readonly name: "ConfigureBilling";
            readonly I: typeof ConfigureBillingRequest;
            readonly O: typeof ConfigureBillingResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         * ManageBilling returns a link to a billing page to manage the user's billing and subscription
         * settings. This will error if the users billing isn't configured.
         *
         * @generated from rpc web.v1.UserService.ManageBilling
         */
        readonly manageBilling: {
            readonly name: "ManageBilling";
            readonly I: typeof ManageBillingRequest;
            readonly O: typeof ManageBillingResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         * OAuthLink returns a link to a page where the user can link their account to an OAuth provider.
         * This is used to allow us to do various things on behalf of the user
         *
         * @generated from rpc web.v1.UserService.OAuthLink
         */
        readonly oAuthLink: {
            readonly name: "OAuthLink";
            readonly I: typeof OAuthLinkRequest;
            readonly O: typeof OAuthLinkResponse;
            readonly kind: MethodKind.Unary;
        };
    };
};
