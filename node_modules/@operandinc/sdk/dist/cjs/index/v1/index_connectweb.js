"use strict";
// @generated by protoc-gen-connect-web v0.2.1 with parameter "target=ts"
// @generated from file index/v1/index.proto (package index.v1, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */
Object.defineProperty(exports, "__esModule", { value: true });
exports.IndexService = void 0;
const index_pb_js_1 = require("./index_pb.js");
const protobuf_1 = require("@bufbuild/protobuf");
/**
 * IndexService is accessed via API key(s), and is used to access
 * and/or perform operations on an index.
 *
 * @generated from service index.v1.IndexService
 */
exports.IndexService = {
    typeName: "index.v1.IndexService",
    methods: {
        /**
         * UpsertObject lets you insert or update an object within the index.
         *
         * @generated from rpc index.v1.IndexService.UpsertObject
         */
        upsertObject: {
            name: "UpsertObject",
            I: index_pb_js_1.UpsertObjectRequest,
            O: index_pb_js_1.UpsertObjectResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * BulkUpsertObjects lets you insert or update multiple objects within the index.
         *
         * @generated from rpc index.v1.IndexService.BulkUpsertObjects
         */
        bulkUpsertObjects: {
            name: "BulkUpsertObjects",
            I: index_pb_js_1.BulkUpsertObjectsRequest,
            O: index_pb_js_1.BulkUpsertObjectsResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * ListObjects is used to list objects within the index.
         *
         * @generated from rpc index.v1.IndexService.ListObjects
         */
        listObjects: {
            name: "ListObjects",
            I: index_pb_js_1.ListObjectsRequest,
            O: index_pb_js_1.ListObjectsResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * GetObjects is used to get specific objects within the index.
         *
         * @generated from rpc index.v1.IndexService.GetObjects
         */
        getObjects: {
            name: "GetObjects",
            I: index_pb_js_1.GetObjectsRequest,
            O: index_pb_js_1.GetObjectsResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * DeleteObject deletes an object, and all of its children.
         *
         * @generated from rpc index.v1.IndexService.DeleteObject
         */
        deleteObject: {
            name: "DeleteObject",
            I: index_pb_js_1.DeleteObjectRequest,
            O: index_pb_js_1.DeleteObjectResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * BulkDeleteObjects deletes multiple objects, and all of their children.
         * This is a big operation, so it is done in the background and returns instantly.
         *
         * @generated from rpc index.v1.IndexService.BulkDeleteObjects
         */
        bulkDeleteObjects: {
            name: "BulkDeleteObjects",
            I: index_pb_js_1.BulkDeleteObjectsRequest,
            O: index_pb_js_1.BulkDeleteObjectsResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * CountObjects counts the number of objects within the index,
         * at a given level in the tree (i.e. given parent, possibly nil).
         *
         * @generated from rpc index.v1.IndexService.CountObjects
         */
        countObjects: {
            name: "CountObjects",
            I: index_pb_js_1.CountObjectsRequest,
            O: index_pb_js_1.CountObjectsResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Webhook is used to send webhooks to particular objects, essentially, letting
         * you interact with a given object of a specific type. Different object types
         * accept different webhooks.
         *
         * @generated from rpc index.v1.IndexService.Webhook
         */
        webhook: {
            name: "Webhook",
            I: index_pb_js_1.WebhookRequest,
            O: index_pb_js_1.WebhookResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Search returns the top-K matching objects for a given query,
         * along with content snippet(s) for each match.
         *
         * @generated from rpc index.v1.IndexService.Search
         */
        search: {
            name: "Search",
            I: index_pb_js_1.SearchRequest,
            O: index_pb_js_1.SearchResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Answer optionally returns an answer to a natural language question.
         * Along with the answer, we return a confidence level which should be checked
         * against a threshold before displaying the answer to the user.
         *
         * @generated from rpc index.v1.IndexService.Answer
         */
        answer: {
            name: "Answer",
            I: index_pb_js_1.AnswerRequest,
            O: index_pb_js_1.AnswerResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Feedback is used to give anonymous feedback to the API on search performance.
         * For example, if a user clicks a document, we want to which document was clicked
         * in response to what search query.
         *
         * @generated from rpc index.v1.IndexService.Feedback
         */
        feedback: {
            name: "Feedback",
            I: index_pb_js_1.FeedbackRequest,
            O: index_pb_js_1.FeedbackResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
    }
};
