"use strict";
// @generated by protoc-gen-es v0.1.1 with parameter "target=ts+js"
// @generated from file index/v1/index.proto (package index.v1, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Condition = exports.Range = exports.Filter = exports.Object$ = exports.KeyedProperty = exports.Property = exports.NumberArray = exports.TextArray = exports.Properties = exports.SlackObjectMetadata = exports.AudioObjectMetadata = exports.PDFObjectMetadata = exports.ImageObjectMetadata = exports.HTMLObjectMetadata = exports.TextObjectMetadata = exports.CollectionObjectMetadata = exports.ObjectMetadata = exports.FeedbackResponse = exports.FeedbackRequest = exports.AnswerFeedback = exports.SearchFeedback = exports.AnswerResponse = exports.AnswerRequest = exports.SearchResponse_Match = exports.SearchResponse = exports.SearchRequest = exports.WebhookResponse = exports.WebhookRequest = exports.CountObjectsResponse = exports.CountObjectsRequest = exports.BulkDeleteObjectsResponse = exports.BulkDeleteObjectsRequest = exports.DeleteObjectResponse = exports.DeleteObjectRequest = exports.GetObjectsResponse = exports.GetObjectsRequest = exports.ListObjectsResponse = exports.ListObjectsRequest = exports.BulkUpsertObjectsResponse = exports.BulkUpsertObjectsRequest = exports.UpsertObjectResponse = exports.UpsertObjectRequest = exports.ObjectStatus = exports.ObjectType = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
/**
 * @generated from enum index.v1.ObjectType
 */
var ObjectType;
(function (ObjectType) {
    /**
     * @generated from enum value: OBJECT_TYPE_UNSPECIFIED = 0;
     */
    ObjectType[ObjectType["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from enum value: OBJECT_TYPE_COLLECTION = 1;
     */
    ObjectType[ObjectType["COLLECTION"] = 1] = "COLLECTION";
    /**
     * @generated from enum value: OBJECT_TYPE_TEXT = 2;
     */
    ObjectType[ObjectType["TEXT"] = 2] = "TEXT";
    /**
     * @generated from enum value: OBJECT_TYPE_HTML = 3;
     */
    ObjectType[ObjectType["HTML"] = 3] = "HTML";
    /**
     * @generated from enum value: OBJECT_TYPE_IMAGE = 4;
     */
    ObjectType[ObjectType["IMAGE"] = 4] = "IMAGE";
    /**
     * @generated from enum value: OBJECT_TYPE_PDF = 5;
     */
    ObjectType[ObjectType["PDF"] = 5] = "PDF";
    /**
     * @generated from enum value: OBJECT_TYPE_AUDIO = 6;
     */
    ObjectType[ObjectType["AUDIO"] = 6] = "AUDIO";
    /**
     * Slack is a unique object type, which requires some additional work
     * on the client side to get working. First off, when the object is first
     * created, we'll do a fetch of all the messages that we have access to,
     * i.e. all the channels that we've been added to. Following this, we await
     * webhook events from Slack, sent via the Webhook API method of this service.
     * We expect the client to essentially reverse proxy certain slack webhooks to
     * the correct object ID, which we'll then use to update the object. Specifically,
     * we support webhooks when we're added to a new channel, and when a new message
     * is posted to a channel we're part of.
     *
     * @generated from enum value: OBJECT_TYPE_SLACK = 7;
     */
    ObjectType[ObjectType["SLACK"] = 7] = "SLACK";
})(ObjectType = exports.ObjectType || (exports.ObjectType = {}));
// Retrieve enum metadata with: proto3.getEnumType(ObjectType)
protobuf_1.proto3.util.setEnumType(ObjectType, "index.v1.ObjectType", [
    { no: 0, name: "OBJECT_TYPE_UNSPECIFIED" },
    { no: 1, name: "OBJECT_TYPE_COLLECTION" },
    { no: 2, name: "OBJECT_TYPE_TEXT" },
    { no: 3, name: "OBJECT_TYPE_HTML" },
    { no: 4, name: "OBJECT_TYPE_IMAGE" },
    { no: 5, name: "OBJECT_TYPE_PDF" },
    { no: 6, name: "OBJECT_TYPE_AUDIO" },
    { no: 7, name: "OBJECT_TYPE_SLACK" },
]);
/**
 * @generated from enum index.v1.ObjectStatus
 */
var ObjectStatus;
(function (ObjectStatus) {
    /**
     * @generated from enum value: OBJECT_STATUS_UNSPECIFIED = 0;
     */
    ObjectStatus[ObjectStatus["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from enum value: OBJECT_STATUS_QUEUED = 1;
     */
    ObjectStatus[ObjectStatus["QUEUED"] = 1] = "QUEUED";
    /**
     * @generated from enum value: OBJECT_STATUS_INDEXING = 2;
     */
    ObjectStatus[ObjectStatus["INDEXING"] = 2] = "INDEXING";
    /**
     * @generated from enum value: OBJECT_STATUS_READY = 3;
     */
    ObjectStatus[ObjectStatus["READY"] = 3] = "READY";
    /**
     * @generated from enum value: OBJECT_STATUS_ERROR = 4;
     */
    ObjectStatus[ObjectStatus["ERROR"] = 4] = "ERROR";
})(ObjectStatus = exports.ObjectStatus || (exports.ObjectStatus = {}));
// Retrieve enum metadata with: proto3.getEnumType(ObjectStatus)
protobuf_1.proto3.util.setEnumType(ObjectStatus, "index.v1.ObjectStatus", [
    { no: 0, name: "OBJECT_STATUS_UNSPECIFIED" },
    { no: 1, name: "OBJECT_STATUS_QUEUED" },
    { no: 2, name: "OBJECT_STATUS_INDEXING" },
    { no: 3, name: "OBJECT_STATUS_READY" },
    { no: 4, name: "OBJECT_STATUS_ERROR" },
]);
/**
 * @generated from message index.v1.UpsertObjectRequest
 */
class UpsertObjectRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpsertObjectRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpsertObjectRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpsertObjectRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UpsertObjectRequest, a, b);
    }
}
exports.UpsertObjectRequest = UpsertObjectRequest;
UpsertObjectRequest.runtime = protobuf_1.proto3;
UpsertObjectRequest.typeName = "index.v1.UpsertObjectRequest";
UpsertObjectRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "existing_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "parent_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "object_type", kind: "enum", T: protobuf_1.proto3.getEnumType(ObjectType), opt: true },
    { no: 4, name: "metadata", kind: "message", T: ObjectMetadata, opt: true },
    { no: 5, name: "properties", kind: "message", T: Properties, opt: true },
    { no: 6, name: "label", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "unique_label", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
]);
/**
 * @generated from message index.v1.UpsertObjectResponse
 */
class UpsertObjectResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpsertObjectResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpsertObjectResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpsertObjectResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UpsertObjectResponse, a, b);
    }
}
exports.UpsertObjectResponse = UpsertObjectResponse;
UpsertObjectResponse.runtime = protobuf_1.proto3;
UpsertObjectResponse.typeName = "index.v1.UpsertObjectResponse";
UpsertObjectResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "object", kind: "message", T: Object$ },
]);
/**
 * @generated from message index.v1.BulkUpsertObjectsRequest
 */
class BulkUpsertObjectsRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * TODO(Morgan): Add sync option (i.e. wait and return responses).
         *
         * @generated from field: repeated index.v1.UpsertObjectRequest requests = 1;
         */
        this.requests = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new BulkUpsertObjectsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new BulkUpsertObjectsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new BulkUpsertObjectsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(BulkUpsertObjectsRequest, a, b);
    }
}
exports.BulkUpsertObjectsRequest = BulkUpsertObjectsRequest;
BulkUpsertObjectsRequest.runtime = protobuf_1.proto3;
BulkUpsertObjectsRequest.typeName = "index.v1.BulkUpsertObjectsRequest";
BulkUpsertObjectsRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "requests", kind: "message", T: UpsertObjectRequest, repeated: true },
]);
/**
 * Currently, no way of checking if this operation was successful.
 *
 * @generated from message index.v1.BulkUpsertObjectsResponse
 */
class BulkUpsertObjectsResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new BulkUpsertObjectsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new BulkUpsertObjectsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new BulkUpsertObjectsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(BulkUpsertObjectsResponse, a, b);
    }
}
exports.BulkUpsertObjectsResponse = BulkUpsertObjectsResponse;
BulkUpsertObjectsResponse.runtime = protobuf_1.proto3;
BulkUpsertObjectsResponse.typeName = "index.v1.BulkUpsertObjectsResponse";
BulkUpsertObjectsResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * @generated from message index.v1.ListObjectsRequest
 */
class ListObjectsRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListObjectsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListObjectsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListObjectsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListObjectsRequest, a, b);
    }
}
exports.ListObjectsRequest = ListObjectsRequest;
ListObjectsRequest.runtime = protobuf_1.proto3;
ListObjectsRequest.typeName = "index.v1.ListObjectsRequest";
ListObjectsRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "parent_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 4, name: "label", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
]);
/**
 * @generated from message index.v1.ListObjectsResponse
 */
class ListObjectsResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated index.v1.Object objects = 1;
         */
        this.objects = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListObjectsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListObjectsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListObjectsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListObjectsResponse, a, b);
    }
}
exports.ListObjectsResponse = ListObjectsResponse;
ListObjectsResponse.runtime = protobuf_1.proto3;
ListObjectsResponse.typeName = "index.v1.ListObjectsResponse";
ListObjectsResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "objects", kind: "message", T: Object$, repeated: true },
    { no: 2, name: "next_cursor", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
]);
/**
 * @generated from message index.v1.GetObjectsRequest
 */
class GetObjectsRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated string object_ids = 1;
         */
        this.objectIds = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetObjectsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetObjectsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetObjectsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetObjectsRequest, a, b);
    }
}
exports.GetObjectsRequest = GetObjectsRequest;
GetObjectsRequest.runtime = protobuf_1.proto3;
GetObjectsRequest.typeName = "index.v1.GetObjectsRequest";
GetObjectsRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "object_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * @generated from message index.v1.GetObjectsResponse
 */
class GetObjectsResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: map<string, index.v1.Object> objects = 1;
         */
        this.objects = {};
        /**
         * @generated from field: repeated string missing = 2;
         */
        this.missing = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetObjectsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetObjectsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetObjectsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetObjectsResponse, a, b);
    }
}
exports.GetObjectsResponse = GetObjectsResponse;
GetObjectsResponse.runtime = protobuf_1.proto3;
GetObjectsResponse.typeName = "index.v1.GetObjectsResponse";
GetObjectsResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "objects", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: Object$ } },
    { no: 2, name: "missing", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * @generated from message index.v1.DeleteObjectRequest
 */
class DeleteObjectRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string id = 1;
         */
        this.id = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteObjectRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteObjectRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteObjectRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeleteObjectRequest, a, b);
    }
}
exports.DeleteObjectRequest = DeleteObjectRequest;
DeleteObjectRequest.runtime = protobuf_1.proto3;
DeleteObjectRequest.typeName = "index.v1.DeleteObjectRequest";
DeleteObjectRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message index.v1.DeleteObjectResponse
 */
class DeleteObjectResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: int32 deleted = 1;
         */
        this.deleted = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteObjectResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteObjectResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteObjectResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeleteObjectResponse, a, b);
    }
}
exports.DeleteObjectResponse = DeleteObjectResponse;
DeleteObjectResponse.runtime = protobuf_1.proto3;
DeleteObjectResponse.typeName = "index.v1.DeleteObjectResponse";
DeleteObjectResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "deleted", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
]);
/**
 * @generated from message index.v1.BulkDeleteObjectsRequest
 */
class BulkDeleteObjectsRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Label can be an exact match, or use '%' as a wildcard.
         * For example, 'foo%' will match all labels that start with 'foo'.
         * This is case sensitive.
         *
         * @generated from field: string label = 2;
         */
        this.label = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new BulkDeleteObjectsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new BulkDeleteObjectsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new BulkDeleteObjectsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(BulkDeleteObjectsRequest, a, b);
    }
}
exports.BulkDeleteObjectsRequest = BulkDeleteObjectsRequest;
BulkDeleteObjectsRequest.runtime = protobuf_1.proto3;
BulkDeleteObjectsRequest.typeName = "index.v1.BulkDeleteObjectsRequest";
BulkDeleteObjectsRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "parent_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "label", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message index.v1.BulkDeleteObjectsResponse
 */
class BulkDeleteObjectsResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new BulkDeleteObjectsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new BulkDeleteObjectsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new BulkDeleteObjectsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(BulkDeleteObjectsResponse, a, b);
    }
}
exports.BulkDeleteObjectsResponse = BulkDeleteObjectsResponse;
BulkDeleteObjectsResponse.runtime = protobuf_1.proto3;
BulkDeleteObjectsResponse.typeName = "index.v1.BulkDeleteObjectsResponse";
BulkDeleteObjectsResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * @generated from message index.v1.CountObjectsRequest
 */
class CountObjectsRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CountObjectsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CountObjectsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CountObjectsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CountObjectsRequest, a, b);
    }
}
exports.CountObjectsRequest = CountObjectsRequest;
CountObjectsRequest.runtime = protobuf_1.proto3;
CountObjectsRequest.typeName = "index.v1.CountObjectsRequest";
CountObjectsRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "parent_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "label", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
]);
/**
 * @generated from message index.v1.CountObjectsResponse
 */
class CountObjectsResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: int32 count = 1;
         */
        this.count = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CountObjectsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CountObjectsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CountObjectsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CountObjectsResponse, a, b);
    }
}
exports.CountObjectsResponse = CountObjectsResponse;
CountObjectsResponse.runtime = protobuf_1.proto3;
CountObjectsResponse.typeName = "index.v1.CountObjectsResponse";
CountObjectsResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
]);
/**
 * @generated from message index.v1.WebhookRequest
 */
class WebhookRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string object_id = 1;
         */
        this.objectId = "";
        /**
         * @generated from field: string operation = 2;
         */
        this.operation = "";
        /**
         * @generated from field: bytes body = 3;
         */
        this.body = new Uint8Array(0);
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new WebhookRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new WebhookRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new WebhookRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(WebhookRequest, a, b);
    }
}
exports.WebhookRequest = WebhookRequest;
WebhookRequest.runtime = protobuf_1.proto3;
WebhookRequest.typeName = "index.v1.WebhookRequest";
WebhookRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "object_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "operation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "body", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * @generated from message index.v1.WebhookResponse
 */
class WebhookResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bytes body = 1;
         */
        this.body = new Uint8Array(0);
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new WebhookResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new WebhookResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new WebhookResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(WebhookResponse, a, b);
    }
}
exports.WebhookResponse = WebhookResponse;
WebhookResponse.runtime = protobuf_1.proto3;
WebhookResponse.typeName = "index.v1.WebhookResponse";
WebhookResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "body", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * @generated from message index.v1.SearchRequest
 */
class SearchRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string query = 1;
         */
        this.query = "";
        /**
         * @generated from field: repeated string roots = 2;
         */
        this.roots = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SearchRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SearchRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SearchRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SearchRequest, a, b);
    }
}
exports.SearchRequest = SearchRequest;
SearchRequest.runtime = protobuf_1.proto3;
SearchRequest.typeName = "index.v1.SearchRequest";
SearchRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "roots", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "session_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "filter", kind: "message", T: Filter, opt: true },
    { no: 5, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
]);
/**
 * @generated from message index.v1.SearchResponse
 */
class SearchResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string search_id = 1;
         */
        this.searchId = "";
        /**
         * @generated from field: repeated index.v1.SearchResponse.Match matches = 2;
         */
        this.matches = [];
        /**
         * @generated from field: map<string, index.v1.Object> objects = 3;
         */
        this.objects = {};
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SearchResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SearchResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SearchResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SearchResponse, a, b);
    }
}
exports.SearchResponse = SearchResponse;
SearchResponse.runtime = protobuf_1.proto3;
SearchResponse.typeName = "index.v1.SearchResponse";
SearchResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "search_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "matches", kind: "message", T: SearchResponse_Match, repeated: true },
    { no: 3, name: "objects", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: Object$ } },
]);
/**
 * @generated from message index.v1.SearchResponse.Match
 */
class SearchResponse_Match extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string match_id = 1;
         */
        this.matchId = "";
        /**
         * @generated from field: string object_id = 2;
         */
        this.objectId = "";
        /**
         * @generated from field: string content = 3;
         */
        this.content = "";
        /**
         * @generated from field: float score = 4;
         */
        this.score = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SearchResponse_Match().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SearchResponse_Match().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SearchResponse_Match().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SearchResponse_Match, a, b);
    }
}
exports.SearchResponse_Match = SearchResponse_Match;
SearchResponse_Match.runtime = protobuf_1.proto3;
SearchResponse_Match.typeName = "index.v1.SearchResponse.Match";
SearchResponse_Match.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "match_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "object_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "score", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 5, name: "extra", kind: "message", T: Properties, opt: true },
]);
/**
 * @generated from message index.v1.AnswerRequest
 */
class AnswerRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string query = 1;
         */
        this.query = "";
        /**
         * @generated from field: repeated string roots = 2;
         */
        this.roots = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AnswerRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AnswerRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AnswerRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(AnswerRequest, a, b);
    }
}
exports.AnswerRequest = AnswerRequest;
AnswerRequest.runtime = protobuf_1.proto3;
AnswerRequest.typeName = "index.v1.AnswerRequest";
AnswerRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "roots", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "session_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "filter", kind: "message", T: Filter, opt: true },
]);
/**
 * @generated from message index.v1.AnswerResponse
 */
class AnswerResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string answer_id = 1;
         */
        this.answerId = "";
        /**
         * @generated from field: string answer = 2;
         */
        this.answer = "";
        /**
         * @generated from field: float confidence = 3;
         */
        this.confidence = 0;
        /**
         * @generated from field: repeated index.v1.Object sources = 4;
         */
        this.sources = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AnswerResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AnswerResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AnswerResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(AnswerResponse, a, b);
    }
}
exports.AnswerResponse = AnswerResponse;
AnswerResponse.runtime = protobuf_1.proto3;
AnswerResponse.typeName = "index.v1.AnswerResponse";
AnswerResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "answer_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "answer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "confidence", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 4, name: "sources", kind: "message", T: Object$, repeated: true },
]);
/**
 * @generated from message index.v1.SearchFeedback
 */
class SearchFeedback extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string search_id = 1;
         */
        this.searchId = "";
        /**
         * @generated from field: string clicked_match_id = 2;
         */
        this.clickedMatchId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SearchFeedback().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SearchFeedback().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SearchFeedback().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SearchFeedback, a, b);
    }
}
exports.SearchFeedback = SearchFeedback;
SearchFeedback.runtime = protobuf_1.proto3;
SearchFeedback.typeName = "index.v1.SearchFeedback";
SearchFeedback.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "search_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "clicked_match_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message index.v1.AnswerFeedback
 */
class AnswerFeedback extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string answer_id = 1;
         */
        this.answerId = "";
        /**
         * @generated from field: bool positive_reaction = 2;
         */
        this.positiveReaction = false;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AnswerFeedback().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AnswerFeedback().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AnswerFeedback().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(AnswerFeedback, a, b);
    }
}
exports.AnswerFeedback = AnswerFeedback;
AnswerFeedback.runtime = protobuf_1.proto3;
AnswerFeedback.typeName = "index.v1.AnswerFeedback";
AnswerFeedback.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "answer_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "positive_reaction", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * @generated from message index.v1.FeedbackRequest
 */
class FeedbackRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof index.v1.FeedbackRequest.feedback
         */
        this.feedback = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FeedbackRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FeedbackRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FeedbackRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(FeedbackRequest, a, b);
    }
}
exports.FeedbackRequest = FeedbackRequest;
FeedbackRequest.runtime = protobuf_1.proto3;
FeedbackRequest.typeName = "index.v1.FeedbackRequest";
FeedbackRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "search", kind: "message", T: SearchFeedback, oneof: "feedback" },
    { no: 2, name: "answer", kind: "message", T: AnswerFeedback, oneof: "feedback" },
]);
/**
 * @generated from message index.v1.FeedbackResponse
 */
class FeedbackResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FeedbackResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FeedbackResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FeedbackResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(FeedbackResponse, a, b);
    }
}
exports.FeedbackResponse = FeedbackResponse;
FeedbackResponse.runtime = protobuf_1.proto3;
FeedbackResponse.typeName = "index.v1.FeedbackResponse";
FeedbackResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * @generated from message index.v1.ObjectMetadata
 */
class ObjectMetadata extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof index.v1.ObjectMetadata.metadata
         */
        this.metadata = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ObjectMetadata().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ObjectMetadata().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ObjectMetadata().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ObjectMetadata, a, b);
    }
}
exports.ObjectMetadata = ObjectMetadata;
ObjectMetadata.runtime = protobuf_1.proto3;
ObjectMetadata.typeName = "index.v1.ObjectMetadata";
ObjectMetadata.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "collection", kind: "message", T: CollectionObjectMetadata, oneof: "metadata" },
    { no: 2, name: "text", kind: "message", T: TextObjectMetadata, oneof: "metadata" },
    { no: 3, name: "html", kind: "message", T: HTMLObjectMetadata, oneof: "metadata" },
    { no: 4, name: "image", kind: "message", T: ImageObjectMetadata, oneof: "metadata" },
    { no: 5, name: "pdf", kind: "message", T: PDFObjectMetadata, oneof: "metadata" },
    { no: 6, name: "audio", kind: "message", T: AudioObjectMetadata, oneof: "metadata" },
    { no: 7, name: "slack", kind: "message", T: SlackObjectMetadata, oneof: "metadata" },
]);
/**
 * @generated from message index.v1.CollectionObjectMetadata
 */
class CollectionObjectMetadata extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CollectionObjectMetadata().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CollectionObjectMetadata().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CollectionObjectMetadata().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CollectionObjectMetadata, a, b);
    }
}
exports.CollectionObjectMetadata = CollectionObjectMetadata;
CollectionObjectMetadata.runtime = protobuf_1.proto3;
CollectionObjectMetadata.typeName = "index.v1.CollectionObjectMetadata";
CollectionObjectMetadata.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * @generated from message index.v1.TextObjectMetadata
 */
class TextObjectMetadata extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string text = 1;
         */
        this.text = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TextObjectMetadata().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TextObjectMetadata().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TextObjectMetadata().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(TextObjectMetadata, a, b);
    }
}
exports.TextObjectMetadata = TextObjectMetadata;
TextObjectMetadata.runtime = protobuf_1.proto3;
TextObjectMetadata.typeName = "index.v1.TextObjectMetadata";
TextObjectMetadata.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message index.v1.HTMLObjectMetadata
 */
class HTMLObjectMetadata extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new HTMLObjectMetadata().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new HTMLObjectMetadata().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new HTMLObjectMetadata().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(HTMLObjectMetadata, a, b);
    }
}
exports.HTMLObjectMetadata = HTMLObjectMetadata;
HTMLObjectMetadata.runtime = protobuf_1.proto3;
HTMLObjectMetadata.typeName = "index.v1.HTMLObjectMetadata";
HTMLObjectMetadata.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "html", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
]);
/**
 * @generated from message index.v1.ImageObjectMetadata
 */
class ImageObjectMetadata extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Supports: JPEG/JPG, PNG.
         *
         * @generated from field: string url = 1;
         */
        this.url = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ImageObjectMetadata().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ImageObjectMetadata().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ImageObjectMetadata().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ImageObjectMetadata, a, b);
    }
}
exports.ImageObjectMetadata = ImageObjectMetadata;
ImageObjectMetadata.runtime = protobuf_1.proto3;
ImageObjectMetadata.typeName = "index.v1.ImageObjectMetadata";
ImageObjectMetadata.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "alt", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
]);
/**
 * @generated from message index.v1.PDFObjectMetadata
 */
class PDFObjectMetadata extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string url = 1;
         */
        this.url = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PDFObjectMetadata().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PDFObjectMetadata().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PDFObjectMetadata().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(PDFObjectMetadata, a, b);
    }
}
exports.PDFObjectMetadata = PDFObjectMetadata;
PDFObjectMetadata.runtime = protobuf_1.proto3;
PDFObjectMetadata.typeName = "index.v1.PDFObjectMetadata";
PDFObjectMetadata.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message index.v1.AudioObjectMetadata
 */
class AudioObjectMetadata extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string url = 1;
         */
        this.url = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AudioObjectMetadata().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AudioObjectMetadata().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AudioObjectMetadata().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(AudioObjectMetadata, a, b);
    }
}
exports.AudioObjectMetadata = AudioObjectMetadata;
AudioObjectMetadata.runtime = protobuf_1.proto3;
AudioObjectMetadata.typeName = "index.v1.AudioObjectMetadata";
AudioObjectMetadata.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message index.v1.SlackObjectMetadata
 */
class SlackObjectMetadata extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string bot_token = 1;
         */
        this.botToken = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SlackObjectMetadata().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SlackObjectMetadata().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SlackObjectMetadata().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SlackObjectMetadata, a, b);
    }
}
exports.SlackObjectMetadata = SlackObjectMetadata;
SlackObjectMetadata.runtime = protobuf_1.proto3;
SlackObjectMetadata.typeName = "index.v1.SlackObjectMetadata";
SlackObjectMetadata.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "bot_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "bot_user_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
]);
/**
 * @generated from message index.v1.Properties
 */
class Properties extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: map<string, index.v1.Property> properties = 1;
         */
        this.properties = {};
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Properties().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Properties().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Properties().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Properties, a, b);
    }
}
exports.Properties = Properties;
Properties.runtime = protobuf_1.proto3;
Properties.typeName = "index.v1.Properties";
Properties.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "properties", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: Property } },
]);
/**
 * @generated from message index.v1.TextArray
 */
class TextArray extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated string values = 1;
         */
        this.values = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TextArray().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TextArray().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TextArray().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(TextArray, a, b);
    }
}
exports.TextArray = TextArray;
TextArray.runtime = protobuf_1.proto3;
TextArray.typeName = "index.v1.TextArray";
TextArray.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "values", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * @generated from message index.v1.NumberArray
 */
class NumberArray extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated double values = 1;
         */
        this.values = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new NumberArray().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new NumberArray().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new NumberArray().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(NumberArray, a, b);
    }
}
exports.NumberArray = NumberArray;
NumberArray.runtime = protobuf_1.proto3;
NumberArray.typeName = "index.v1.NumberArray";
NumberArray.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "values", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, repeated: true },
]);
/**
 * @generated from message index.v1.Property
 */
class Property extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof index.v1.Property.value
         */
        this.value = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Property().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Property().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Property().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Property, a, b);
    }
}
exports.Property = Property;
Property.runtime = protobuf_1.proto3;
Property.typeName = "index.v1.Property";
Property.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 2, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "value" },
    { no: 3, name: "number", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, oneof: "value" },
    { no: 4, name: "text_array", kind: "message", T: TextArray, oneof: "value" },
    { no: 5, name: "number_array", kind: "message", T: NumberArray, oneof: "value" },
]);
/**
 * @generated from message index.v1.KeyedProperty
 */
class KeyedProperty extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string key = 1;
         */
        this.key = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new KeyedProperty().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new KeyedProperty().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new KeyedProperty().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(KeyedProperty, a, b);
    }
}
exports.KeyedProperty = KeyedProperty;
KeyedProperty.runtime = protobuf_1.proto3;
KeyedProperty.typeName = "index.v1.KeyedProperty";
KeyedProperty.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "property", kind: "message", T: Property },
]);
/**
 * @generated from message index.v1.Object
 */
class Object$ extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string id = 1;
         */
        this.id = "";
        /**
         * @generated from field: index.v1.ObjectType type = 5;
         */
        this.type = ObjectType.UNSPECIFIED;
        /**
         * @generated from field: index.v1.ObjectStatus status = 8;
         */
        this.status = ObjectStatus.UNSPECIFIED;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Object$().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Object$().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Object$().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Object$, a, b);
    }
}
exports.Object$ = Object$;
Object$.runtime = protobuf_1.proto3;
Object$.typeName = "index.v1.Object";
Object$.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "created_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 3, name: "updated_at", kind: "message", T: protobuf_1.Timestamp, opt: true },
    { no: 4, name: "parent_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "type", kind: "enum", T: protobuf_1.proto3.getEnumType(ObjectType) },
    { no: 6, name: "metadata", kind: "message", T: ObjectMetadata },
    { no: 7, name: "properties", kind: "message", T: Properties },
    { no: 8, name: "status", kind: "enum", T: protobuf_1.proto3.getEnumType(ObjectStatus) },
    { no: 9, name: "label", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
]);
/**
 * @generated from message index.v1.Filter
 */
class Filter extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated index.v1.Condition conditions = 1;
         */
        this.conditions = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Filter().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Filter().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Filter().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Filter, a, b);
    }
}
exports.Filter = Filter;
Filter.runtime = protobuf_1.proto3;
Filter.typeName = "index.v1.Filter";
Filter.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "conditions", kind: "message", T: Condition, repeated: true },
]);
/**
 * @generated from message index.v1.Range
 */
class Range extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string key = 1;
         */
        this.key = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Range().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Range().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Range().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Range, a, b);
    }
}
exports.Range = Range;
Range.runtime = protobuf_1.proto3;
Range.typeName = "index.v1.Range";
Range.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "lt", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, opt: true },
    { no: 3, name: "lte", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, opt: true },
    { no: 4, name: "gt", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, opt: true },
    { no: 5, name: "gte", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, opt: true },
]);
/**
 * @generated from message index.v1.Condition
 */
class Condition extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof index.v1.Condition.condition
         */
        this.condition = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Condition().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Condition().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Condition().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Condition, a, b);
    }
}
exports.Condition = Condition;
Condition.runtime = protobuf_1.proto3;
Condition.typeName = "index.v1.Condition";
Condition.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "property", kind: "message", T: KeyedProperty, oneof: "condition" },
    { no: 2, name: "range", kind: "message", T: Range, oneof: "condition" },
    { no: 3, name: "and", kind: "message", T: Filter, oneof: "condition" },
    { no: 4, name: "or", kind: "message", T: Filter, oneof: "condition" },
    { no: 5, name: "not", kind: "message", T: Filter, oneof: "condition" },
]);
