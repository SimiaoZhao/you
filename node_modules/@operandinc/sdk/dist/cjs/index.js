"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.V3Types = exports.V3Connect = exports.operandClient = exports.indexIDHeaderKey = void 0;
const connect_web_1 = require("@bufbuild/connect-web");
const cross_fetch_1 = require("cross-fetch");
function createHeaderInterceptor(headers) {
    return (next) => async (req) => {
        if (headers) {
            for (const [key, value] of Object.entries(headers)) {
                if (!req.header.has(key) && value) {
                    req.header.set(key, value);
                }
            }
        }
        return await next(req);
    };
}
exports.indexIDHeaderKey = 'Operand-Index-ID';
function operandClient(service, apiKey, endpoint, extraHeaders, forceFetchTransport) {
    const baseUrl = endpoint || 'https://engine.operand.ai';
    const headers = Object.assign(Object.assign({}, extraHeaders), { Authorization: apiKey });
    const transport = hasFetchApi() && !forceFetchTransport
        ? (0, connect_web_1.createConnectTransport)({
            baseUrl: baseUrl,
            interceptors: [createHeaderInterceptor(headers)],
            jsonOptions: {
                ignoreUnknownFields: true,
            }
        })
        : createNodeFetchTransport(baseUrl, headers);
    return (0, connect_web_1.createPromiseClient)(service, transport);
}
exports.operandClient = operandClient;
function hasFetchApi() {
    try {
        new Headers();
        return true;
    }
    catch (_) {
        return false;
    }
}
function createRequestBody(message) {
    return message.toJsonString();
}
function createNodeFetchTransport(baseUrl, headers) {
    return {
        async unary(service, method, _signal, _timeoutMs, _header, message) {
            const endpoint = `${baseUrl}/${service.typeName}/${method.name}`;
            const response = await (0, cross_fetch_1.default)(endpoint, {
                method: 'POST',
                headers: Object.assign(Object.assign({}, headers), { 'Content-Type': 'application/json' }),
                body: createRequestBody(message instanceof method.I ? message : new method.I(message)),
            });
            if (!response.ok) {
                const body = await response.text();
                const message = `Request failed with code ${response.status}, status ${response.statusText}: ${body}`;
                console.warn(message);
                return Promise.reject(new Error(message));
            }
            return {
                message: method.O.fromJson((await response.json()), {
                    ignoreUnknownFields: true,
                }),
            };
        },
        async serverStream(_service, _method, _signal, _timeoutMs, _header, _message) {
            return Promise.reject(new Error('Not implemented'));
        },
    };
}
exports.V3Connect = require("./index/v1/index_connectweb.js");
exports.V3Types = require("./index/v1/index_pb.js");
__exportStar(require("./operand/v1/object_connectweb.js"), exports);
__exportStar(require("./operand/v1/object_pb.js"), exports);
__exportStar(require("./operand/v1/operand_connectweb.js"), exports);
__exportStar(require("./operand/v1/operand_pb.js"), exports);
__exportStar(require("./operand/v1/notification_connectweb.js"), exports);
__exportStar(require("./operand/v1/notification_pb.js"), exports);
__exportStar(require("./operand/v1/index_connectweb.js"), exports);
__exportStar(require("./operand/v1/index_pb.js"), exports);
