"use strict";
// @generated by protoc-gen-connect-web v0.2.1 with parameter "target=ts"
// @generated from file operand/v1/object.proto (package operand.v1, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectService = void 0;
const object_pb_js_1 = require("./object_pb.js");
const protobuf_1 = require("@bufbuild/protobuf");
/**
 * ObjectService is the user-facing API for doing operations on objects themselves, within an index.
 * To use this service, must pass `Operand-Index-ID` as a header, which specifies the index to use.
 * The API key, passed by the `Authorization`, must have appropriate permissions to access the index.
 *
 * @generated from service operand.v1.ObjectService
 */
exports.ObjectService = {
    typeName: "operand.v1.ObjectService",
    methods: {
        /**
         * Upsert inserts or updates an object within the index.
         *
         * @generated from rpc operand.v1.ObjectService.Upsert
         */
        upsert: {
            name: "Upsert",
            I: object_pb_js_1.UpsertRequest,
            O: object_pb_js_1.UpsertResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Suggestions returns a list of suggested objects that the user may choose to index
         * based on the given query. For example, if the user is trying to index a podcast,
         * and they pass in the name, we return a list of podcasts that we could index for them
         * based on the name. This typically searches external resources, i.e. APIs.
         *
         * @generated from rpc operand.v1.ObjectService.Suggestions
         */
        suggestions: {
            name: "Suggestions",
            I: object_pb_js_1.SuggestionsRequest,
            O: object_pb_js_1.SuggestionsResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * List lists objects within the index.
         *
         * @generated from rpc operand.v1.ObjectService.List
         */
        list: {
            name: "List",
            I: object_pb_js_1.ListRequest,
            O: object_pb_js_1.ListResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Get gets one or more objects from the index by their ID.
         *
         * @generated from rpc operand.v1.ObjectService.Get
         */
        get: {
            name: "Get",
            I: object_pb_js_1.GetRequest,
            O: object_pb_js_1.GetResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Delete deletes one or more objects from the index by their ID.
         *
         * @generated from rpc operand.v1.ObjectService.Delete
         */
        delete: {
            name: "Delete",
            I: object_pb_js_1.DeleteRequest,
            O: object_pb_js_1.DeleteResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Count counts the objects in the index.
         *
         * @generated from rpc operand.v1.ObjectService.Count
         */
        count: {
            name: "Count",
            I: object_pb_js_1.CountRequest,
            O: object_pb_js_1.CountResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * SearchWithin searches for content within objects themselves, returning small snippets of
         * relevant content to the search query, along with the relevant objects themselves.
         *
         * @generated from rpc operand.v1.ObjectService.SearchWithin
         */
        searchWithin: {
            name: "SearchWithin",
            I: object_pb_js_1.SearchWithinRequest,
            O: object_pb_js_1.SearchWithinResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Answer generates a natural language to a question, using the content of the index as the
         * ground truth. If we don't have a good answer, we don't answer.
         *
         * @generated from rpc operand.v1.ObjectService.Answer
         */
        answer: {
            name: "Answer",
            I: object_pb_js_1.AnswerRequest,
            O: object_pb_js_1.AnswerResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
    }
};
