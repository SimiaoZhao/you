"use strict";
// @generated by protoc-gen-connect-web v0.2.1 with parameter "target=ts"
// @generated from file web/v1/key.proto (package web.v1, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyService = void 0;
const key_pb_js_1 = require("./key_pb.js");
const protobuf_1 = require("@bufbuild/protobuf");
/**
 * KeyService is used by the user to manage their API keys. These are used to perform operations
 * on the indexes that the user owns or is subscribed to.
 *
 * @generated from service web.v1.KeyService
 */
exports.KeyService = {
    typeName: "web.v1.KeyService",
    methods: {
        /**
         * CreateKey creates a new API key for the user.
         *
         * @generated from rpc web.v1.KeyService.CreateKey
         */
        createKey: {
            name: "CreateKey",
            I: key_pb_js_1.CreateKeyRequest,
            O: key_pb_js_1.CreateKeyResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * ListKeys lists all the API keys for the user.
         *
         * @generated from rpc web.v1.KeyService.ListKeys
         */
        listKeys: {
            name: "ListKeys",
            I: key_pb_js_1.ListKeysRequest,
            O: key_pb_js_1.ListKeysResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * DeleteKey deletes an API key for the user.
         *
         * @generated from rpc web.v1.KeyService.DeleteKey
         */
        deleteKey: {
            name: "DeleteKey",
            I: key_pb_js_1.DeleteKeyRequest,
            O: key_pb_js_1.DeleteKeyResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
    }
};
