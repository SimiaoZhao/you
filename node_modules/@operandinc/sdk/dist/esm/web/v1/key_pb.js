// @generated by protoc-gen-es v0.1.1 with parameter "target=ts+js"
// @generated from file web/v1/key.proto (package web.v1, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
/**
 * @generated from message web.v1.APIKey
 */
export class APIKey extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string key = 3;
         */
        this.key = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new APIKey().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new APIKey().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new APIKey().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(APIKey, a, b);
    }
}
APIKey.runtime = proto3;
APIKey.typeName = "web.v1.APIKey";
APIKey.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "created_at", kind: "message", T: Timestamp },
    { no: 2, name: "last_used", kind: "message", T: Timestamp, opt: true },
    { no: 3, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message web.v1.CreateKeyRequest
 */
export class CreateKeyRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CreateKeyRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CreateKeyRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CreateKeyRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(CreateKeyRequest, a, b);
    }
}
CreateKeyRequest.runtime = proto3;
CreateKeyRequest.typeName = "web.v1.CreateKeyRequest";
CreateKeyRequest.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message web.v1.CreateKeyResponse
 */
export class CreateKeyResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CreateKeyResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CreateKeyResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CreateKeyResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(CreateKeyResponse, a, b);
    }
}
CreateKeyResponse.runtime = proto3;
CreateKeyResponse.typeName = "web.v1.CreateKeyResponse";
CreateKeyResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "message", T: APIKey },
]);
/**
 * @generated from message web.v1.ListKeysRequest
 */
export class ListKeysRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListKeysRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListKeysRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListKeysRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ListKeysRequest, a, b);
    }
}
ListKeysRequest.runtime = proto3;
ListKeysRequest.typeName = "web.v1.ListKeysRequest";
ListKeysRequest.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message web.v1.ListKeysResponse
 */
export class ListKeysResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated web.v1.APIKey keys = 1;
         */
        this.keys = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListKeysResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListKeysResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListKeysResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ListKeysResponse, a, b);
    }
}
ListKeysResponse.runtime = proto3;
ListKeysResponse.typeName = "web.v1.ListKeysResponse";
ListKeysResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "keys", kind: "message", T: APIKey, repeated: true },
]);
/**
 * @generated from message web.v1.DeleteKeyRequest
 */
export class DeleteKeyRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string key = 1;
         */
        this.key = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteKeyRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteKeyRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteKeyRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(DeleteKeyRequest, a, b);
    }
}
DeleteKeyRequest.runtime = proto3;
DeleteKeyRequest.typeName = "web.v1.DeleteKeyRequest";
DeleteKeyRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message web.v1.DeleteKeyResponse
 */
export class DeleteKeyResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteKeyResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteKeyResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteKeyResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(DeleteKeyResponse, a, b);
    }
}
DeleteKeyResponse.runtime = proto3;
DeleteKeyResponse.typeName = "web.v1.DeleteKeyResponse";
DeleteKeyResponse.fields = proto3.util.newFieldList(() => []);
