// @generated by protoc-gen-es v0.1.1 with parameter "target=ts+js"
// @generated from file operand/v1/brain.proto (package operand.v1, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */
import { Message, proto3 } from "@bufbuild/protobuf";
/**
 * RequiresMigrationRequest is the request for the RequiresMigration RPC.
 *
 * @generated from message operand.v1.RequiresMigrationRequest
 */
export class RequiresMigrationRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RequiresMigrationRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RequiresMigrationRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RequiresMigrationRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RequiresMigrationRequest, a, b);
    }
}
RequiresMigrationRequest.runtime = proto3;
RequiresMigrationRequest.typeName = "operand.v1.RequiresMigrationRequest";
RequiresMigrationRequest.fields = proto3.util.newFieldList(() => []);
/**
 * RequiresMigrationResponse is the response for the RequiresMigration RPC.
 *
 * @generated from message operand.v1.RequiresMigrationResponse
 */
export class RequiresMigrationResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bool requires_migration = 1;
         */
        this.requiresMigration = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RequiresMigrationResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RequiresMigrationResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RequiresMigrationResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RequiresMigrationResponse, a, b);
    }
}
RequiresMigrationResponse.runtime = proto3;
RequiresMigrationResponse.typeName = "operand.v1.RequiresMigrationResponse";
RequiresMigrationResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "requires_migration", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * MigrateRequest is the request for the Migrate RPC.
 *
 * @generated from message operand.v1.MigrateRequest
 */
export class MigrateRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string destination_index_id = 1;
         */
        this.destinationIndexId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MigrateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MigrateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MigrateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MigrateRequest, a, b);
    }
}
MigrateRequest.runtime = proto3;
MigrateRequest.typeName = "operand.v1.MigrateRequest";
MigrateRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "destination_index_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * MigrateResponse is the response for the Migrate RPC.
 *
 * @generated from message operand.v1.MigrateResponse
 */
export class MigrateResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MigrateResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MigrateResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MigrateResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MigrateResponse, a, b);
    }
}
MigrateResponse.runtime = proto3;
MigrateResponse.typeName = "operand.v1.MigrateResponse";
MigrateResponse.fields = proto3.util.newFieldList(() => []);
