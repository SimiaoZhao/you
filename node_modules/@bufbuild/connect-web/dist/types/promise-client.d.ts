import type { MethodInfoServerStreaming, MethodInfoUnary, PartialMessage, ServiceType } from "@bufbuild/protobuf";
import type { Transport } from "./transport.js";
import type { CallOptions } from "./call-options.js";
/**
 * PromiseClient is a simple client that supports unary and server-streaming
 * methods. Methods will produce a promise for the response message,
 * or an asynchronous iterable of response messages.
 */
export declare type PromiseClient<T extends ServiceType> = {
    [P in keyof T["methods"]]: T["methods"][P] extends MethodInfoUnary<infer I, infer O> ? (request: PartialMessage<I>, options?: CallOptions) => Promise<O> : T["methods"][P] extends MethodInfoServerStreaming<infer I, infer O> ? (request: PartialMessage<I>, options?: CallOptions) => AsyncIterable<O> : never;
};
/**
 * Create a PromiseClient for the given service, invoking RPCs through the
 * given transport.
 */
export declare function createPromiseClient<T extends ServiceType>(service: T, transport: Transport): PromiseClient<T>;
